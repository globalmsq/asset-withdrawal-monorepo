# Multi-stage Dockerfile for Nx applications
FROM node:20-alpine AS base

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./
COPY apps/api-server/package.json ./apps/api-server/
COPY packages/shared/package.json ./packages/shared/
COPY packages/database/package.json ./packages/database/

# Install all dependencies (including devDependencies for ts-node)
RUN yarn install --frozen-lockfile

# Copy source files
COPY nx.json tsconfig.json ./
COPY apps/ ./apps/
COPY packages/ ./packages/
COPY prisma/ ./prisma/

# Generate Prisma client
RUN npx prisma generate

# Build the libraries (still needed for dependencies)
RUN yarn nx run database:build
RUN yarn nx run shared:build

# Production stage for api-server
FROM node:20-alpine AS api-server

# Install production dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./
COPY apps/api-server/package.json ./apps/api-server/
COPY packages/shared/package.json ./packages/shared/
COPY packages/database/package.json ./packages/database/

# Install all dependencies (including ts-node)
RUN yarn install --frozen-lockfile

# Copy all source files
COPY nx.json tsconfig.json ./
COPY apps/ ./apps/
COPY packages/ ./packages/
COPY prisma/ ./prisma/

# Generate Prisma client
RUN npx prisma generate

# Set environment variables
ENV NODE_ENV=production
ENV PORT=8080

# Expose port
EXPOSE 8080

# Start the application using ts-node
CMD ["yarn", "workspace", "api-server", "start"]

