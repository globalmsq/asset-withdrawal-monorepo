# Task ID: 22
# Title: [BFS-32] Implement Hardhat node-based localhost chain support
# Status: in-progress
# Dependencies: None
# Priority: medium
# Description: Implement localhost blockchain network support based on Hardhat node for local development and testing environment. This enables fast and reliable development environment without external testnet dependencies. Ready to proceed sequentially starting from the first subtask.
# Details:
Hardhat development environment setup (npm install --save-dev hardhat @nomicfoundation/hardhat-ethers ethers, npx hardhat init for basic project structure, hardhat.config.ts configuration file setup), Local network configuration (defaultNetwork: 'hardhat', networks.hardhat settings - chainId: 31337, mining.auto: true, mining.interval: 3000ms, accounts configuration - including LocalStack private key 0x0000000000000000000000000000000000000000000000000000000000000001), Localhost chain configuration in chains.config.json (chainId: 31337, name: 'localhost', rpcUrl: 'http://127.0.0.1:8545' configuration, explicit chain parameter specification in API requests), NetworkConfig type extension (localhost network configuration addition, chainId: 31337, name: 'localhost', rpcUrl setting through ChainProvider mechanism), Smart contract deployment scripts (scripts/deploy-localhost.ts implementation, ERC20 token contract deployment, Multicall3 contract deployment, transfer all test tokens to signing address, export deployed addresses as environment variables), Local development workflow improvement (integrate hardhat service into existing docker-compose, run npx hardhat node --hostname 0.0.0.0, automatic account creation and funding, block mining interval configuration), Test helper utility implementation (test account creation functions, test token transfer functions, block timestamp manipulation functions, snapshot/revert functionality), Developer tools integration (utilize Hardhat Network Helper, console.log debugging support, gas reporting configuration, solidity coverage measurement), Fork mode support (polygon mainnet/testnet fork functionality, fork from specific block height, simulate real network state), Automation scripts (add npm run dev:localhost command, sequential execution: start Hardhat node → deploy contracts → setup test data → start API server). Now ready to start from the first subtask (22.1).

# Test Strategy:
Hardhat node connection test (localhost RPC connection verification, chain ID 31337 validation), Test account operation verification (confirm signing address 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf created with LocalStack private key, verify ETH and token balances of signing address), ERC20 token deployment and transfer test (confirm successful token contract deployment, verify all tokens transferred to signing address, test token transfer transactions, validate balance query accuracy), Multicall3 contract test (verify batch call functionality, test multi-token balance queries), Block mining operation test (verify automatic mining interval, test manual mining trigger), Transaction processing flow test (complete flow: withdrawal request → queue → processing → monitoring, gas estimation on local network, transaction receipt queries), Fork mode test (mainnet fork state verification, test interactions with real contracts), Development environment integration test (execute full stack with docker-compose up, verify automatic deployment script operation, API server and local blockchain integration), ChainProvider localhost configuration test (verify localhost chain handling through existing provider mechanism, test explicit chain parameter specification in API requests), Performance comparison test (compare local vs testnet transaction speeds, measure development workflow efficiency)

# Subtasks:
## 1. Hardhat development environment setup and project initialization [done]
### Dependencies: None
### Description: Install Hardhat packages and configure basic project structure with TypeScript-based configuration files. [Updated: 2025. 7. 23.] [Updated: 2025. 7. 23.]
### Details:
Execute npm install --save-dev hardhat @nomicfoundation/hardhat-ethers ethers @typechain/hardhat typechain @typechain/ethers-v6, create TypeScript project with npx hardhat init, generate hardhat.config.ts file with basic configuration, setup contracts/, scripts/, test/ directory structure, add artifacts/, cache/, typechain-types/ to .gitignore, add Hardhat type references to tsconfig.json
<info added on 2025-07-23T13:07:54.480Z>
docker/hardhat directory structure creation: create docker/hardhat/ folder with package.json (including hardhat, @nomicfoundation/hardhat-ethers, ethers, @typechain/hardhat, typechain dependencies), hardhat.config.js (network settings - localhost:8545, chainId:31337, account configuration), Dockerfile and docker-compose.yml service definition for running Hardhat node in Docker environment, setup to run local blockchain network with hardhat node command inside container
</info added on 2025-07-23T13:07:54.480Z>
<info added on 2025-07-23T13:16:15.109Z>
Jira key mapping added to BFS-33 - indicates this subtask is linked to Jira issue BFS-33
</info added on 2025-07-23T13:16:15.109Z>
<start-ready on 2025-07-23T13:30:00.000Z>
Ready to start immediately: Begin with the first subtask of installing Hardhat packages and initial setup. Includes docker/hardhat directory structure creation and Hardhat node execution environment setup.
</start-ready on 2025-07-23T13:30:00.000Z>
<info added on 2025-07-23T14:46:20.347Z>
작업 제목과 설명 영어 번역 완료:

Title: "Hardhat development environment setup and project initialization"
Description: "Install Hardhat packages and configure basic project structure with TypeScript-based configuration files."

영어 번역본이 이미 기존 작업 내용에 반영되어 있으며, 해당 작업은 Hardhat 개발 환경 설정 및 프로젝트 초기화를 수행하는 첫 번째 서브태스크입니다.
</info added on 2025-07-23T14:46:20.347Z>

## 2. Localhost chain configuration in chains.config.json and ChainProvider integration [pending]
### Dependencies: 22.1
### Description: Configure localhost chain in chains.config.json and integrate with existing ChainProvider mechanism, removing environment variable dependencies.
### Details:
Add localhost chain configuration to chains.config.json (chainId: 31337, name: 'localhost', symbol: 'ETH', decimals: 18, rpcUrl: 'http://127.0.0.1:8545'), add 'localhost' to ChainName type in packages/shared/src/types/chain.types.ts, add localhost case handling in packages/shared/src/providers/chain-provider.factory.ts (create JsonRpcProvider instance), add networks.hardhat configuration to hardhat.config.ts (chainId: 31337, mining.auto: true, mining.interval: 3000, accounts configuration - including LocalStack private key 0x0000000000000000000000000000000000000000000000000000000000000001 to generate signing address 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf), integrate hardhat service into existing docker-compose.yaml (run npx hardhat node --hostname 0.0.0.0), remove environment variable setup for POLYGON_NETWORK=localhost, LOCALHOST_RPC_URL, LOCALHOST_SIGNING_PRIVATE_KEY

## 3. ERC20 token and Multicall3 contract deployment script implementation [pending]
### Dependencies: 22.2
### Description: Implement scripts to deploy test ERC20 tokens and Multicall3 contract, transferring all tokens to the signing address.
### Details:
Create contracts/TestToken.sol (inherit OpenZeppelin ERC20, include minting function), add contracts/Multicall3.sol (for batch calls), write scripts/deploy-localhost.ts deployment script, deploy ERC20 token and transfer all tokens (e.g., 1,000,000 TEST) to signing address 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf, deploy Multicall3 contract, save deployed contract addresses to .env.localhost file (TEST_TOKEN_ADDRESS, MULTICALL3_ADDRESS), create scripts/setup-test-data.ts for test data setup (user creation, sample withdrawal requests, etc.), automate type generation with TypeChain
<info added on 2025-07-23T13:08:36.235Z>
Create contracts/Multicall3.sol file using provided Multicall3.sol code, create contracts/TestToken.sol file (inherit OpenZeppelin ERC20 with minting functionality), write scripts/deploy.js deployment script (deploy both contracts and transfer all tokens to signing address 0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf), save deployment information to deployment.json file (instead of or in addition to existing .env.localhost)
</info added on 2025-07-23T13:08:36.235Z>

## 4. Test helper utilities and developer tools implementation [pending]
### Dependencies: 22.3
### Description: Implement helper functions for efficient testing on Hardhat network and integrate developer tools.
### Details:
Create packages/shared/src/utils/hardhat-helpers.ts (getSigningAccount, fundAccount, advanceTime, takeSnapshot/revertToSnapshot functions, Multicall3 interface functions), integrate Hardhat Network Helpers (@nomicfoundation/hardhat-network-helpers), setup console.log debugging support, configure hardhat-gas-reporter plugin, setup solidity-coverage plugin, add Fork mode support (forking configuration in hardhat.config.ts), add signing address related helper functions
<info added on 2025-07-23T13:08:56.753Z>
Implement init-hardhat.sh script: Hardhat node waiting logic (check http://127.0.0.1:8545 status with curl, wait up to 30 seconds), contract compilation (execute npx hardhat compile), deployment script execution (node scripts/deploy.js), integration with hardhat-deploy service in docker-compose.yaml (set depends_on to run after hardhat-node is ready, dependency management through healthcheck), script execution permissions (chmod +x init-hardhat.sh), error handling and logging (output success/failure logs for each step)
</info added on 2025-07-23T13:08:56.753Z>

## 5. Automation scripts and development workflow integration with explicit chain parameter support [pending]
### Dependencies: 22.4
### Description: Create automation scripts for local development environment and integrate with existing Docker Compose system using explicit chain parameters instead of environment variables.
### Details:
Add dev:localhost script to package.json (sequential execution: start Hardhat node → deploy contracts → setup test data → start API server), write scripts/start-local-dev.sh shell script, modify all microservices to recognize localhost chain through explicit chain parameter specification in API requests (not environment variables), update blockchain connection logic in withdrawal-api, tx-processor, tx-monitor services to use ChainProvider with explicit chain='localhost' parameter, fully integrate hardhat service into existing docker-compose.yaml file, add dependency management with LocalStack, update README.md with local development guide (including LocalStack private key, signing address, Multicall3 usage, explicit chain parameter usage), add hardhat-node and hardhat-deploy service configuration to docker-compose.yaml file (hardhat-node: use hardhat/hardhat:latest image, port mapping 8545:8545, chain-id 31337 setting; hardhat-deploy: dedicated service for contract deployment, hardhat-node dependency setting), update all microservices (withdrawal-api, tx-processor, tx-monitor) to handle localhost chain through ChainProvider mechanism, set Multicall3 contract address for localhost chain (0xcA11bde05977b3631167028862bE2a173976CA11 standard address or deployed address), manage inter-service network dependencies (sequential start: hardhat-node → hardhat-deploy → api services), healthcheck configuration to verify service readiness

