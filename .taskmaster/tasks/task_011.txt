# Task ID: 11
# Title: [BFS-4] signing-service Multicall3 배치 전송 기능 구현
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: ERC20 토큰 배치 전송을 위한 Multicall3 통합 기능 구현
# Details:
Multicall3 컨트랙트 주소 설정 (Polygon: 0xcA11bde05977b3631167028862bE2a173976CA11), MulticallService 클래스 구현으로 여러 ERC20 전송을 하나의 트랜잭션으로 배치 처리, TransactionSigner에 signBatchTransaction() 메서드 추가, WithdrawalRequest 모델에 type 필드 추가 ('SINGLE' | 'BATCH'), ABI 인코딩 및 calldata 생성 로직 구현, 배치 크기 최적화 (가스 한도 내에서 최대 전송 수 계산)

# Test Strategy:
Multicall3 컨트랙트 호출 테스트, 배치 전송 가스 계산 정확성 검증, 단일 vs 배치 전송 성능 비교 테스트, 최대 배치 크기 한계 테스트, 실패 시나리오 (가스 부족, 잘못된 토큰 주소) 테스트

# Subtasks:
## 1. [BFS-2] Polygon Multicall3 컨트랙트 주소 설정 [done]
### Dependencies: None
### Description: Polygon 네트워크의 Multicall3 컨트랙트 주소를 환경 설정에 추가하고 네트워크별 구성 관리
### Details:
환경 변수에 Multicall3 컨트랙트 주소 (0xcA11bde05977b3631167028862bE2a173976CA11) 추가, 네트워크별 주소 매핑 구성, 환경 설정 검증 로직 구현
<info added on 2025-07-21T13:56:54.550Z>
POLYGON_MULTICALL3_ADDRESS 환경 변수를 .env.sample에 추가 완료, config/index.ts에서 환경 변수 읽기와 주소 검증 로직이 구현됨, config/networks.ts 파일을 새로 생성하여 Amoy 테스트넷과 Polygon 메인넷 모두에 대해 Multicall3 주소 0xcA11bde05977b3631167028862bE2a173976CA11 매핑을 구성함
</info added on 2025-07-21T13:56:54.550Z>
<info added on 2025-07-21T14:20:16.702Z>
기존 환경변수 기반 Multicall3 설정을 제거하고 중앙집중식 관리로 전환 완료. packages/shared/src/config/chains.config.json에 polygon, ethereum, bsc 체인 모두에 대해 multicall3Address 속성 추가됨. ChainProvider 클래스에 getMulticall3Address(chainType: ChainType) 메서드 구현하여 체인별 Multicall3 주소 조회 기능 제공. signing-service의 config/networks.ts와 환경변수 POLYGON_MULTICALL3_ADDRESS 설정 제거하여 중복 제거 및 일관된 설정 관리 달성.
</info added on 2025-07-21T14:20:16.702Z>

## 2. [BFS-3] MulticallService 클래스 구현 [done]
### Dependencies: 11.1
### Description: 여러 ERC20 전송을 하나의 트랜잭션으로 배치 처리하는 MulticallService 핵심 클래스 개발
### Details:
MulticallService 클래스 구조 설계, 배치 전송 요청 처리 메서드, Multicall3 컨트랙트와의 인터페이스 구현, 에러 핸들링 로직 추가
<info added on 2025-07-21T14:35:33.022Z>
MulticallService 클래스 구현이 완료되었습니다. apps/signing-service/src/services/multicall.service.ts 파일에 다음 주요 메서드들이 구현되었습니다: prepareBatchTransfer (배치 전송 준비), encodeBatchTransaction (트랜잭션 인코딩), validateBatch (배치 검증), getOptimalBatchSize (최적 배치 크기 계산). ChainProvider를 통해 Multicall3 컨트랙트 주소를 동적으로 가져오도록 설계하였으며, apps/signing-service/src/services/__tests__/multicall.service.test.ts 테스트 파일을 작성하여 모든 기능에 대한 검증을 완료했습니다.
</info added on 2025-07-21T14:35:33.022Z>

## 3. [BFS-14] ABI 인코딩 및 calldata 생성 로직 구현 [done]
### Dependencies: 11.2
### Description: ERC20 전송을 위한 ABI 인코딩과 Multicall3용 calldata 생성 로직 개발
### Details:
ERC20 transfer 함수 ABI 인코딩, Multicall3 aggregate 함수를 위한 calldata 배열 생성, 인코딩 정확성 검증, 바이트 데이터 최적화

## 4. [BFS-15] 배치 크기 최적화 로직 구현 [done]
### Dependencies: 11.3
### Description: 가스 한도 내에서 최대 전송 수를 계산하는 배치 크기 최적화 기능 개발
### Details:
가스 사용량 추정 로직, 블록 가스 한도 대비 최적 배치 크기 계산, 동적 배치 크기 조정 알고리즘, 가스비 효율성 분석

## 5. [BFS-16] TransactionSigner 확장 및 배치 서명 기능 추가 [done]
### Dependencies: 11.4
### Description: 기존 TransactionSigner에 signBatchTransaction() 메서드를 추가하여 배치 트랜잭션 서명 지원
### Details:
signBatchTransaction() 메서드 구현, 단일 트랜잭션과 배치 트랜잭션 서명 로직 통합, nonce 관리 개선, 서명 검증 로직 추가

## 6. [BFS-17] 데이터 모델 업데이트 및 통합 테스트 [done]
### Dependencies: 11.5
### Description: WithdrawalRequest 모델에 type 필드 추가 및 전체 Multicall3 기능 통합 테스트 수행
### Details:
WithdrawalRequest 모델에 type: 'SINGLE' | 'BATCH' 필드 추가, 데이터베이스 스키마 업데이트, 단일/배치 전송 통합 테스트, 성능 비교 테스트 수행

## 7. [BFS-18] Multicall3 컨트랙트 주소 설정 및 ChainProvider 확장 [done]
### Dependencies: None
### Description: Polygon 메인넷 및 테스트넷에 대한 Multicall3 컨트랙트 주소 설정 및 ChainProvider에서 주소 조회 기능 구현
### Details:
Polygon 메인넷(0xcA11bde05977b3631167028862bE2a173976CA11) 및 Amoy 테스트넷 Multicall3 주소 추가, ChainProvider.getMulticallAddress() 메서드 구현, 네트워크별 주소 매핑 로직 추가, 환경 변수 기반 네트워크 선택 지원

## 8. [BFS-19] MulticallService 클래스 리팩토링 및 확장 [done]
### Dependencies: 11.7
### Description: 기존 MulticallService를 확장하여 실제 배치 전송 기능 완성 및 성능 최적화
### Details:
MulticallService에서 실제 Multicall3 컨트랙트 호출 로직 구현, 배치 전송 결과 파싱 및 처리, 가스 추정 로직 개선, aggregate3 메서드를 사용한 배치 호출 구현, 실패한 전송 건 개별 처리 로직 추가

## 9. [BFS-20] ERC-20 ABI 인코딩 및 calldata 생성 로직 구현 [done]
### Dependencies: 11.8
### Description: ERC-20 transfer 메서드를 위한 ABI 인코딩 로직 및 Multicall3용 calldata 생성 기능 구현
### Details:
Ethers.js Interface를 사용한 transfer 메서드 인코딩, Multicall3.Call 구조체 생성 로직, 다중 토큰 전송을 위한 calldata 배열 생성, 각 전송 건별 target, allowFailure, callData 설정, ABI 인코딩 오류 핸들링

## 10. [BFS-21] 배치 크기 최적화 및 가스 계산 로직 [done]
### Dependencies: 11.9
### Description: 가스 한도 내에서 최적의 배치 크기를 계산하고 동적으로 조정하는 기능 구현
### Details:
가스 한도 기반 최대 배치 크기 계산 알고리즘, 토큰별 전송 비용 추정, 배치 오버헤드 고려한 최적화, 동적 배치 분할 로직, Polygon 네트워크 가스 특성 반영, 배치 크기별 성능 테스트 및 벤치마킹
<info added on 2025-07-22T15:13:46.918Z>
구현 완료: Polygon 네트워크 기반 가스 최적화 시스템 - 30M 가스 한도와 75% 안전 마진을 적용한 동적 배치 분할 알고리즘 구현, 토큰별 가스 비용 학습 캐싱 시스템 도입으로 실시간 비용 예측 정확도 향상, 배치 크기에 따른 점감 가스 비용 계산 로직으로 배치 효율성 극대화, 향상된 fallback 가스 추정 메커니즘으로 네트워크 혼잡 상황 대응 강화, 모든 단위 테스트 및 통합 테스트 통과 확인
</info added on 2025-07-22T15:13:46.918Z>

## 11. [BFS-22] TransactionSigner 배치 전송 기능 확장 [done]
### Dependencies: 11.10
### Description: TransactionSigner 클래스에 배치 트랜잭션 서명 기능 추가 및 기존 단일 전송과의 통합
### Details:
signBatchTransaction() 메서드 구현, 배치 트랜잭션 가스 추정 로직, EIP-1559 트랜잭션 타입 지원, 배치와 단일 전송 구분 로직, nonce 관리 개선, 트랜잭션 서명 실패 시 개별 전송으로 fallback 메커니즘
<info added on 2025-07-22T15:20:23.097Z>
BFS-22 구현 완료. signBatchTransaction() 메서드와 signBatchTransactionWithSplitting() 메서드 추가하여 Multicall3 배치 전송 서명 지원. getGasPrice() 메서드 추출로 코드 중복 제거. 단일 및 분할 배치, 검증 실패 처리, 가스 추정, Redis 연결 에러 처리, 대용량 배치 시나리오 등에 대한 포괄적인 테스트 커버리지 구현. MulticallService와의 통합으로 배치 준비 및 인코딩 지원. Polygon 네트워크에서 EIP-1559 트랜잭션 지원. 배치 분할 시 순차적 nonce 관리 구현. 모든 테스트, 린트 검사, 타입 검사 통과 확인.
</info added on 2025-07-22T15:20:23.097Z>

## 12. [BFS-23] WithdrawalRequest 모델 업데이트 및 배치 처리 지원 [done]
### Dependencies: 11.11
### Description: WithdrawalRequest 모델에 배치 전송 타입 필드 추가 및 관련 데이터베이스 스키마 업데이트
### Details:
WithdrawalRequest에 type 필드 추가 ('SINGLE' | 'BATCH'), batchId 필드 추가로 배치 그룹 관리, Prisma 스키마 업데이트, 기존 레코드와의 호환성 보장, 배치 전송 상태 추적 로직, 배치 내 개별 전송 상태 관리 기능

## 13. [BFS-24] Multicall3 컨트랙트 주소 및 ABI 구성 설정 [done]
### Dependencies: None
### Description: Polygon 네트워크용 Multicall3 컨트랙트 주소와 ABI 정의를 설정하고 네트워크별 구성 관리
### Details:
Polygon 메인넷 및 테스트넷용 Multicall3 컨트랙트 주소 (0xcA11bde05977b3631167028862bE2a173976CA11) 설정, Multicall3 ABI 정의, 네트워크별 설정 파일 구성, 컨트랙트 주소 검증 로직

## 14. [BFS-25] MulticallService 클래스 기본 구조 구현 [done]
### Dependencies: None
### Description: 배치 전송을 위한 MulticallService 클래스의 기본 구조와 의존성 주입 설정
### Details:
MulticallService 클래스 생성, Ethers.js Provider 및 Contract 인스턴스 초기화, 의존성 주입을 위한 생성자 설정, 기본 인터페이스 및 타입 정의, 에러 처리를 위한 기본 구조

## 15. [BFS-26] ERC20 transfer ABI 인코딩 로직 구현 [done]
### Dependencies: None
### Description: ERC20 토큰 전송을 위한 ABI 인코딩과 calldata 생성 기능 개발
### Details:
ERC20 transfer 함수 ABI 인코딩, 토큰 주소/수신자/금액 파라미터 검증, calldata 바이트 배열 생성, 인코딩 정확성 검증 로직, 인코딩 에러 핸들링

## 16. [BFS-27] 배치 크기 최적화 및 가스 계산 로직 [done]
### Dependencies: None
### Description: 가스 한도 내에서 최적의 배치 크기를 계산하고 가스비 추정 기능 구현
### Details:
배치 전송당 가스 소모량 추정, 가스 한도 기반 최대 배치 크기 계산, 동적 배치 크기 조정 알고리즘, 가스비 최적화 로직, 배치 분할 전략 구현

## 17. [BFS-28] TransactionSigner에 배치 전송 메서드 확장 [done]
### Dependencies: None
### Description: 기존 TransactionSigner 클래스에 signBatchTransaction() 메서드 추가 및 통합
### Details:
signBatchTransaction() 메서드 구현, Multicall3 트랜잭션 구조 생성, 기존 단일 전송과 배치 전송 로직 통합, 트랜잭션 타입별 분기 처리, 서명 검증 로직 확장
<info added on 2025-07-22T08:36:49.185Z>
실제 구현 완료: signBatchTransaction() 메서드가 TransactionSigner 클래스에 성공적으로 추가됨. BatchSigningRequest를 매개변수로 받아 여러 전송을 검증하고, MulticallService를 사용하여 배치를 준비한 후 단일 Multicall3 트랜잭션으로 서명하는 기능이 정상 동작함. SigningWorker에도 MulticallService 종속성 주입이 완료되었으며, 새로운 종속성을 포함하도록 모든 테스트가 수정됨.
</info added on 2025-07-22T08:36:49.185Z>

## 18. [BFS-29] WithdrawalRequest 모델 및 데이터베이스 스키마 업데이트 [done]
### Dependencies: None
### Description: 배치 전송 지원을 위한 모델 확장과 관련 데이터베이스 스키마 변경
### Details:
WithdrawalRequest 모델에 type 필드 추가 ('SINGLE' | 'BATCH'), 배치 전송 관련 추가 필드 정의, Prisma 스키마 업데이트, 기존 데이터 호환성 보장, 마이그레이션 스크립트 작성
<info added on 2025-07-22T13:41:16.651Z>
새로운 구조: BatchTransaction 테이블을 생성하여 배치 메타데이터 저장 (batchId, totalAmount, tokenAddress, status, createdAt), WithdrawalRequest에 batchId 필드 추가하여 배치와 개별 요청 연결, SignedTransaction은 개별 트랜잭션 처리용으로 유지, 동적 배치 처리를 위한 관계형 구조 설계, 배치 상태 관리 및 추적 기능, 기존 단일 전송과의 하위 호환성 보장
</info added on 2025-07-22T13:41:16.651Z>

## 19. [BFS-30] SigningWorker 동적 배치 처리 로직 구현 [done]
### Dependencies: 11.18
### Description: 큐 메시지를 분석하여 배치/단일 처리를 동적으로 결정하고 Multicall3 컨트랙트를 활용한 배치 처리 최적화 구현 [Updated: 2025. 7. 22.] [Updated: 2025. 7. 22.] [Updated: 2025. 7. 22.]
### Details:
SigningWorker 클래스의 processBatch() 메서드 리팩토링으로 동적 배치 처리 로직 구현:

1. shouldUseBatchProcessing() 메서드 구현
   - 환경 변수 ENABLE_BATCH_PROCESSING 체크 (기본값: true)
   - 큐 메시지 수가 MIN_BATCH_SIZE (기본: 5) 이상인지 확인
   - 동일 토큰 주소의 트랜잭션이 BATCH_THRESHOLD (기본: 3) 이상인지 검증
   - 예상 가스 절약률이 MIN_GAS_SAVINGS_PERCENT (기본: 20%) 이상인지 계산

2. groupByToken() 메서드 구현
   ```typescript
   private groupByToken(messages: Message<WithdrawalMessage>[]): Map<string, Message<WithdrawalMessage>[]> {
     return messages.reduce((groups, message) => {
       const tokenAddress = message.body.tokenAddress.toLowerCase();
       if (!groups.has(tokenAddress)) {
         groups.set(tokenAddress, []);
       }
       groups.get(tokenAddress)!.push(message);
       return groups;
     }, new Map());
   }
   ```

3. calculateGasSavings() 메서드 구현
   - 개별 처리 예상 가스: count * SINGLE_TX_GAS_ESTIMATE
   - 배치 처리 예상 가스: BATCH_BASE_GAS + (count * BATCH_PER_TX_GAS)
   - 절약률 계산: ((개별 - 배치) / 개별) * 100

4. processBatch() 메서드 수정
   ```typescript
   async processBatch(messages: Message<WithdrawalMessage>[]): Promise<void> {
     if (await this.shouldUseBatchProcessing(messages)) {
       const tokenGroups = this.groupByToken(messages);
       
       for (const [tokenAddress, groupMessages] of tokenGroups) {
         if (groupMessages.length >= this.config.BATCH_THRESHOLD) {
           await this.processBatchGroup(tokenAddress, groupMessages);
         } else {
           await this.processSingleTransactions(groupMessages);
         }
       }
     } else {
       await this.processSingleTransactions(messages);
     }
   }
   ```

5. processBatchGroup() 메서드 구현
   - BatchTransaction 엔티티 생성 (status: 'pending')
   - 개별 Transaction 레코드 생성 및 batchId 연결
   - Multicall3 컨트랙트 호출 데이터 생성
   - 배치 트랜잭션 서명 및 전송
   - 결과에 따른 상태 업데이트

6. 환경 변수 설정
   ```env
   ENABLE_BATCH_PROCESSING=true
   MIN_BATCH_SIZE=5
   BATCH_THRESHOLD=3
   MIN_GAS_SAVINGS_PERCENT=20
   SINGLE_TX_GAS_ESTIMATE=65000
   BATCH_BASE_GAS=100000
   BATCH_PER_TX_GAS=25000
   ```

7. 로깅 및 메트릭 추가
   - 배치 처리 결정 로직 로깅
   - 가스 절약 예상치 로깅
   - 배치 처리 성공/실패 메트릭
<info added on 2025-07-22T14:01:02.619Z>
종속성 업데이트: 이전 종속성인 11, 11.3, 11.4에서 11.18 (WithdrawalRequest 모델 및 데이터베이스 스키마 업데이트)로 변경. 11.11, 11.11.3, 11.11.4는 존재하지 않는 태스크였으므로 제거됨.
</info added on 2025-07-22T14:01:02.619Z>
<info added on 2025-07-22T14:09:36.960Z>
Jira 이슈 키: BFS-30
</info added on 2025-07-22T14:09:36.960Z>
<info added on 2025-07-22T14:13:27.897Z>
제목을 "[BFS-30] SigningWorker 동적 배치 처리 로직 구현"으로 업데이트함. Jira 이슈 키 BFS-30이 제목에 접두사로 추가됨.
</info added on 2025-07-22T14:13:27.897Z>
<info added on 2025-07-23T02:11:54.817Z>
코드베이스 분석 결과:
- SigningWorker가 BaseWorker를 상속받아 processBatch() 메서드 사용
- 현재는 개별 트랜잭션 처리만 구현되어 있음
- MulticallService가 이미 구현되어 배치 처리 기능 제공
- BatchTransaction 모델이 Prisma 스키마에 정의됨
- Config 클래스를 통한 환경 변수 관리 구조 확인

구현 준비사항:
- BaseWorker의 기존 processBatch() 메서드를 오버라이드하여 동적 배치 처리 로직 추가
- MulticallService와의 연동을 통한 실제 배치 트랜잭션 실행
- Config 클래스에 배치 처리 관련 환경 변수 추가 필요
- BatchTransaction 모델을 활용한 배치 상태 관리 구현
</info added on 2025-07-23T02:11:54.817Z>
<info added on 2025-07-23T02:19:48.749Z>
구현 완료 - 2025년 7월 23일:

✅ 주요 구현 사항:
- shouldUseBatchProcessing(): 환경변수(ENABLE_BATCH_PROCESSING), 메시지 수(MIN_BATCH_SIZE), 토큰 그룹 크기(BATCH_THRESHOLD), 가스 절약률(MIN_GAS_SAVINGS_PERCENT) 기반 동적 판단 로직 완성
- groupByToken(): 토큰 주소별 메시지 그룹화 메서드 구현
- calculateGasSavings(): 배치 vs 개별 처리 가스 비용 비교 및 절약률 계산 로직 구현
- processBatch() 메서드 오버라이드: BaseWorker 상속하여 배치/개별 처리 분기 로직 완성
- processBatchTransactions(): 토큰 그룹별 배치 처리 실행 메서드 구현
- processBatchGroup(): BatchTransaction 엔티티 생성, Multicall3 컨트랙트 연동, 트랜잭션 서명 및 상태 관리 완성

✅ 검증 완료:
- 모든 단위 테스트 작성 및 통과
- TypeScript 타입체크 통과
- ESLint 코드 품질 검사 통과
- MulticallService와의 연동 검증 완료

구현된 기능으로 동적 배치 처리 최적화를 통한 가스 비용 절약 및 트랜잭션 처리 효율성 향상 달성.
</info added on 2025-07-23T02:19:48.749Z>

