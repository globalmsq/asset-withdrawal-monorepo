# 블록체인 출금 시스템 - 제품 요구사항 문서 (PRD)

## Jira 프로젝트 정보
- **프로젝트 키**: BFS

## 프로젝트 개요

자산 출금 시스템은 **다중 블록체인 지원** 암호화폐 출금 플랫폼입니다. Polygon, Ethereum, BSC 및 localhost (Hardhat) 체인을 지원하며, 마이크로서비스 아키텍처와 큐 기반 비동기 처리를 통해 안전하고 확장 가능한 출금 서비스를 제공합니다.

### 핵심 목표
- **완전한 출금 플로우 구현**: API 요청 → 서명 → 브로드캐스트 → 모니터링
- **보안 우선**: 이중 암호화를 통한 개인키 보호 및 자산 안전성 확보
- **확장성**: 대량 트랜잭션 처리를 위한 분산 아키텍처
- **운영성**: Admin 페이지를 통한 효율적인 시스템 관리
- **비용 효율성**: 배치 처리를 통한 가스비 절감

## 시스템 요구사항

### 핵심 서비스

#### 1. 출금 처리 서비스
- **출금 API**: 출금 요청 접수, 검증, 상태 조회
- **트랜잭션 서명**: 안전한 트랜잭션 서명 및 nonce 관리
- **블록체인 전송**: 서명된 트랜잭션을 블록체인 네트워크로 전송
- **상태 모니터링**: 트랜잭션 상태 실시간 추적 및 확인
- **오류 처리**: 실패한 트랜잭션의 자동 재시도 및 복구

#### 2. 계정 관리 서비스 (Account Manager)
- **자동 잔액 관리**: 메인 계정에서 서브 계정으로 자동 잔액 밸런싱
- **잔액 모니터링**: 서브 계정들의 잔액을 주기적으로 확인
- **임계값 기반 충전**: 잔액이 설정된 임계값 이하로 떨어지면 자동 충전
- **배치 처리**: 여러 충전 요청을 모아서 처리하여 가스비 절감
- **알림 기능**: 메인 계정 잔액 부족 시 운영팀에 알림

#### 3. 관리자 시스템
- **Admin API**: 관리자용 REST API, 인증 및 권한 관리
- **Admin UI**: React 기반 웹 관리자 인터페이스
- **모니터링 대시보드**: 실시간 시스템 상태 및 트랜잭션 현황
- **사용자 관리**: 계정 생성, 권한 설정, 활동 이력 조회
- **시스템 설정**: 가스 가격 임계값, 재시도 정책 등 운영 파라미터 관리

### 비기능적 요구사항

#### 성능
- **트랜잭션 처리 시간**: 요청부터 완료까지 30초 이내
- **API 응답 시간**: 200ms 이내 (p95)
- **처리량**: 초당 100건 트랜잭션 처리
- **일일 처리량**: 최대 100만 건
- **동시 사용자**: 1,000명 이상 지원

#### 보안
- **개인키 보호**: 이중 암호화 (AWS Secrets Manager + AES-256-GCM)
- **인증 및 권한**: JWT 기반 인증, 역할 기반 접근 제어
- **2단계 인증**: TOTP 기반 2FA 지원
- **API 보안**: API 키 관리, IP 화이트리스트, Rate Limiting
- **감사 로그**: 모든 중요 작업에 대한 추적 가능한 로그

#### 확장성
- **수평 확장**: 마이크로서비스별 독립적 확장 가능
- **큐 기반 처리**: 비동기 처리로 부하 분산
- **다중 인스턴스**: 서비스별 다중 인스턴스 동시 실행 지원
- **자동 스케일링**: 부하에 따른 자동 확장/축소

#### 가용성
- **SLA**: 99.5% 이상
- **무중단 배포**: Blue/Green 배포 전략
- **자동 복구**: 장애 발생 시 자동 복구 메커니즘
- **다중 AZ 배포**: 가용성 존 장애 대응

## 사용자 경험

### API 사용자 (개발자)
- **명확한 API 문서**: Swagger/OpenAPI 3.0 사양의 대화형 문서
- **일관된 에러 응답**: 표준화된 에러 코드 및 메시지
- **재시도 정책**: 재시도 가능/불가능 에러 명확히 구분
- **샌드박스 환경**: 안전한 테스트 환경 제공
- **SDK 제공**: 주요 프로그래밍 언어별 SDK

### 운영팀
- **직관적인 대시보드**: 한눈에 시스템 상태 파악 가능
- **실시간 모니터링**: 트랜잭션 현황, 큐 상태, 시스템 리소스
- **빠른 문제 대응**: 수동 재시도, 상태 변경 등 즉각적 개입 도구
- **상세 검색**: 다양한 조건으로 트랜잭션 검색 및 필터링
- **보고서 생성**: 일별/주별/월별 운영 보고서

## 시스템 흐름

### 출금 처리 흐름
```
[사용자] → [API 서버] → [출금 요청 큐] → [서명 서비스] → [서명된 트랜잭션 큐] → [브로드캐스트 서비스] → [블록체인]
                                                                                                    ↓
                                                                                            [모니터링 서비스]
```

### 계정 관리 흐름
```
[메인 계정] ← [계정 관리 서비스] → [서브 계정들]
                    ↓
            [잔액 모니터링]
                    ↓
            [자동 충전 실행]
```

## 지원 블록체인

### 현재 지원
- **Polygon**: 메인넷, Amoy 테스트넷
- **Localhost**: Hardhat 기반 로컬 개발 환경

### 향후 지원 예정
- **Ethereum**: 메인넷, Sepolia 테스트넷
- **BSC**: 메인넷, 테스트넷
- **Arbitrum**: 메인넷, 테스트넷

## 트랜잭션 상태 정의

- **PENDING**: 초기 요청 상태
- **VALIDATING**: 요청 검증 중
- **SIGNING**: 트랜잭션 서명 중
- **SIGNED**: 서명 완료
- **BROADCASTING**: 블록체인 전송 중
- **BROADCASTED**: 블록체인 전송 완료
- **CONFIRMING**: 블록 확인 대기 중
- **CONFIRMED**: 최종 확인 완료
- **FAILED**: 처리 실패
- **CANCELED**: 취소됨 (사용자 요청 또는 시스템 취소)

## 운영 요구사항

### 모니터링 및 알림

#### 모니터링 대상
- **비즈니스 메트릭**: 출금 요청 수, 성공률, 평균 처리 시간
- **시스템 메트릭**: CPU, 메모리, 네트워크 I/O
- **애플리케이션 메트릭**: API 응답 시간, 큐 깊이, 에러율

#### 알림 조건
- **위험 (즉시 대응)**
  - API 오류율 > 5% (5분간)
  - 큐 메시지 > 1000개
  - DLQ 메시지 > 100개
  - 트랜잭션 실패율 > 10%
  - 시스템 리소스 > 90%

- **경고 (모니터링)**
  - API 응답 시간 > 1초
  - 큐 메시지 > 500개
  - DLQ 메시지 > 50개
  - 트랜잭션 실패율 > 5%
  - 시스템 리소스 > 70%

### 백업 및 복구

#### 백업 전략
- **데이터베이스**: 일일 자동 백업 (30일 보관)
- **트랜잭션 로그**: 실시간 백업 (7일 보관)
- **설정 파일**: 버전 관리 시스템에 저장

#### 복구 목표
- **RPO (복구 시점 목표)**: 1시간
- **RTO (복구 시간 목표)**: 4시간
- **복구 테스트**: 월 1회 실시

### 로깅

#### 로그 수준
- **ERROR**: 시스템 오류, 트랜잭션 실패
- **WARN**: 성능 저하, 리소스 부족
- **INFO**: 트랜잭션 상태, API 요청
- **DEBUG**: 상세 처리 과정 (개발 환경만)

#### 로그 보관
- **실시간 로그**: 7일
- **아카이브 로그**: 90일
- **감사 로그**: 1년
- **중앙 집중식 관리**: ELK Stack 활용

## 비즈니스 가치

### Polygon 네트워크 선택 이유
- **비용 효율성**: 이더리움 대비 1/100 수준의 가스비
- **빠른 처리**: 2초 블록 생성 시간
- **이더리움 호환성**: 기존 도구 및 생태계 활용 가능
- **안정성**: 대규모 트랜잭션 처리 검증된 네트워크

### 기대 효과
- **운영 효율성**: 자동화를 통한 운영 비용 80% 절감
- **보안 강화**: 이중 암호화로 자산 보호 수준 향상
- **확장성 확보**: 비즈니스 성장에 따른 유연한 확장
- **사용자 만족도**: 빠르고 안정적인 출금 서비스 제공

## 개발 로드맵

### 1단계: 핵심 시스템 완성
- 완전한 출금 플로우 구현
- 트랜잭션 모니터링 시스템
- 오류 처리 및 재시도 메커니즘
- 실제 잔액 검증 기능

### 2단계: 관리 시스템 구축
- Admin API 및 인증 시스템
- React 기반 Admin UI
- 실시간 모니터링 대시보드
- 계정 관리 서비스 (Account Manager)

### 3단계: 프로덕션 준비
- 보안 강화 (2FA, API 키 관리)
- 성능 최적화 및 부하 테스트
- 자동 확장 인프라 구축
- 백업 및 복구 시스템

### 4단계: 확장
- Ethereum 메인넷 지원
- BSC, Arbitrum 등 추가 체인 지원
- 크로스체인 브릿지 기능
- 고급 분석 및 리포팅

## 위험 관리

### 기술적 위험
1. **nonce 충돌**: 분산 환경에서 트랜잭션 순서 보장
2. **RPC 장애**: 블록체인 노드 연결 실패 대응
3. **가스 가격 급등**: 트랜잭션 비용 관리

### 운영 위험
1. **대량 출금 요청**: 급격한 부하 증가 대응
2. **시스템 장애**: 단일 실패 지점 제거
3. **보안 위협**: 지속적인 보안 감사 및 대응

### 대응 전략
- 실시간 모니터링 및 자동 알림
- 자동 스케일링 및 부하 분산
- 정기적인 보안 감사 및 침투 테스트
- 비상 대응 계획 수립 및 훈련

## 용어 정의

### 서비스 명칭
- **API 서버**: HTTP API 게이트웨이
- **서명 서비스**: 트랜잭션 서명 처리
- **브로드캐스트 서비스**: 블록체인 전송
- **모니터링 서비스**: 트랜잭션 상태 추적
- **계정 관리 서비스**: 자동 잔액 밸런싱

### 기타 용어
- **메인 계정**: 자금을 보유한 중앙 계정
- **서브 계정**: 실제 출금을 수행하는 작업 계정
- **nonce**: 트랜잭션 순서를 보장하는 번호
- **가스비**: 블록체인 트랜잭션 수수료
- **DLQ**: Dead Letter Queue, 처리 실패한 메시지 보관소

---

**프로젝트 목표**: 안전하고 확장 가능한 다중 블록체인 출금 시스템 구축

**관련 문서**: 
- 요구사항 요약: requirements_summary.md
- 개발 계획: plan.md
- 시스템 아키텍처: ARCHITECTURE.md
- 기술 설계: TECHNICAL_DESIGN.md (예정)
- 설정 가이드: SETUP.md