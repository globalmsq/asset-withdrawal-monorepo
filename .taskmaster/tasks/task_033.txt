# Task ID: 33
# Title: [BFS-53] Recovery Service 구현 - 중앙화된 DLQ 메시지 모니터링 및 자동 복구 시스템
# Status: pending
# Dependencies: 11, 15, 28, 29
# Priority: medium
# Description: DLQ(Dead Letter Queue) 메시지를 모니터링하고 에러 타입별로 자동 복구를 수행하는 중앙화된 Recovery Service를 구현하여 시스템 복원력을 향상시킵니다.
# Details:
**구현 목표**
- 모든 DLQ(request-dlq, signed-tx-dlq, broadcast-tx-dlq)를 모니터링하는 중앙화된 서비스 구현
- 에러 타입별 자동 복구 전략으로 시스템 안정성 극대화
- 복구 불가능한 메시지에 대한 영구 실패 처리 및 알림 시스템

**1. Recovery Service 앱 생성**
- `apps/recovery-service` 디렉토리 생성
- Express 기반 웹 서버 및 워커 프로세스 분리
- 환경 변수 기반 DLQ 설정 및 복구 정책 관리

**2. DLQ 모니터링 시스템**
- DLQMonitor 클래스로 request-dlq, signed-tx-dlq, broadcast-tx-dlq 동시 모니터링
- 폴링 기반 메시지 수신 (기본 30초 간격, 설정 가능)
- 메시지 분석을 위한 ErrorAnalyzer 구현
```typescript
interface RecoveryStrategy {
  canRecover(error: DLQMessage): boolean;
  recover(message: DLQMessage): Promise<RecoveryResult>;
  getMaxRetryCount(): number;
}
```

**3. 에러 타입별 복구 전략**
- NetworkErrorRecovery: 네트워크 에러 시 지수 백오프로 재시도 (최대 5회)
- NonceErrorRecovery: nonce 충돌 시 NonceCacheService 재시작 후 재시도
- InsufficientBalanceRecovery: 잔액 부족 시 영구 실패 처리 및 알림
- GasErrorRecovery: 가스 부족 시 가스비 재계산 후 재시도
- UnknownErrorRecovery: 분류되지 않은 에러의 기본 재시도 로직

**4. 복구 워크플로우**
- RecoveryOrchestrator가 메시지 수신부터 복구 완료까지 전체 프로세스 관리
- 복구 성공 시 원본 큐로 메시지 재전송
- 복구 실패 시 재시도 카운트 증가 후 재처리 또는 영구 실패 처리
- 모든 복구 활동 로깅 및 메트릭 수집

**5. 관리 API 및 모니터링**
- REST API로 복구 상태 조회 및 수동 복구 트리거
- Prometheus 메트릭 노출 (복구 성공/실패율, 처리 시간 등)
- 영구 실패 메시지에 대한 알림 시스템 (이메일/Slack)

**6. 데이터베이스 모델**
- RecoveryAttempt 모델로 복구 시도 이력 추적
- 메시지 ID, 에러 유형, 복구 전략, 시도 횟수, 결과 저장

# Test Strategy:
**1. DLQ 모니터링 테스트**
- 각 DLQ(request-dlq, signed-tx-dlq, broadcast-tx-dlq)에 테스트 메시지 전송
- DLQMonitor가 모든 큐에서 메시지를 정상 수신하는지 확인
- 폴링 간격 설정 및 동시 처리 능력 테스트
- 큐 연결 실패 시 재연결 로직 검증

**2. 에러 분석 및 복구 전략 테스트**
- 네트워크 에러 시뮬레이션으로 NetworkErrorRecovery 동작 확인
- nonce 충돌 상황 재현 후 NonceErrorRecovery 복구 테스트
- 잔액 부족 메시지로 InsufficientBalanceRecovery 영구 실패 처리 검증
- 가스 부족 에러에 대한 GasErrorRecovery 가스비 재계산 테스트
- 알 수 없는 에러에 대한 기본 재시도 로직 테스트

**3. 복구 워크플로우 통합 테스트**
- 메시지 수신부터 복구 완료까지 전체 플로우 테스트
- 복구 성공 시 원본 큐로 메시지 재전송 확인
- 최대 재시도 횟수 도달 시 영구 실패 처리 테스트
- 동시 복구 작업 처리 시 리소스 경합 상황 테스트

**4. API 및 모니터링 테스트**
- REST API를 통한 복구 상태 조회 기능 테스트
- 수동 복구 트리거 API 동작 확인
- Prometheus 메트릭 정확성 검증
- 영구 실패 알림 시스템 동작 테스트

**5. 성능 및 안정성 테스트**
- 대량 DLQ 메시지 처리 시 메모리 사용량 모니터링
- 장시간 실행 시 메모리 누수 및 커넥션 풀 관리 테스트
- 서비스 재시작 시 진행 중인 복구 작업 복원 테스트

# Subtasks:
## 1. [BFS-54] Recovery Service 기본 구조 및 앱 셋업 [pending]
### Dependencies: None
### Description: apps/recovery-service 디렉토리를 생성하고 Express 기반 웹 서버와 워커 프로세스의 기본 구조를 구축합니다.
### Details:
apps/recovery-service 디렉토리 생성, package.json 및 tsconfig.json 설정, 환경 변수 설정 파일(.env 템플릿), Docker 설정 파일 작성, Express 기반 HTTP 서버 및 워커 프로세스 분리 구조 구현, 기본 미들웨어(cors, helmet, express.json) 설정, 헬스 체크 엔드포인트(/health) 구현, 로깅 시스템 초기화

## 2. [BFS-55] DLQ 모니터링 시스템 구현 [pending]
### Dependencies: 33.1
### Description: 모든 DLQ(request-dlq, signed-tx-dlq, broadcast-tx-dlq)를 동시에 모니터링하는 DLQMonitor 클래스를 구현합니다.
### Details:
DLQMonitor 클래스 구현으로 3개 DLQ 동시 폴링, SQS 메시지 수신 및 파싱 로직, 폴링 인터벌 30초 기본값으로 설정(환경변수로 조정 가능), 메시지 배치 처리 및 병렬 처리 지원, 연결 실패 시 재연결 로직, 메시지 수신 실패 로그 및 메트릭 기록, graceful shutdown 지원

## 3. [BFS-56] 에러 분석 및 복구 전략 시스템 구현 [pending]
### Dependencies: 33.2
### Description: 에러 타입을 분석하고 각 타입별로 적절한 복구 전략을 적용하는 ErrorAnalyzer와 RecoveryStrategy 시스템을 구현합니다.
### Details:
ErrorAnalyzer 클래스로 DLQ 메시지의 에러 타입 분류, RecoveryStrategy 인터페이스 정의, NetworkErrorRecovery 구현(지수 백오프, 최대 5회 재시도), NonceErrorRecovery 구현(NonceCacheService 재시작 후 재시도), InsufficientBalanceRecovery 구현(영구 실패 처리), GasErrorRecovery 구현(가스비 재계산), UnknownErrorRecovery 구현(기본 재시도), 복구 전략별 최대 재시도 횟수 설정

## 4. [BFS-57] RecoveryOrchestrator 및 워크플로우 구현 [pending]
### Dependencies: 33.3
### Description: 메시지 수신부터 복구 완료까지 전체 프로세스를 관리하는 RecoveryOrchestrator와 복구 워크플로우를 구현합니다.
### Details:
RecoveryOrchestrator 클래스로 전체 복구 프로세스 조율, 메시지 수신 → 에러 분석 → 복구 전략 선택 → 복구 실행 워크플로우, 복구 성공 시 원본 큐로 메시지 재전송 로직, 복구 실패 시 재시도 카운트 증가 및 재처리, 최대 재시도 초과 시 영구 실패 처리, 모든 복구 활동 로깅 및 메트릭 수집, RecoveryAttempt 데이터베이스 모델 연동

## 5. [BFS-58] 관리 API 및 모니터링 시스템 구현 [pending]
### Dependencies: 33.4
### Description: 복구 상태 조회, 수동 복구 트리거를 위한 REST API와 Prometheus 메트릭, 알림 시스템을 구현합니다.
### Details:
REST API 엔드포인트 구현(/api/recovery/status, /api/recovery/trigger, /api/recovery/stats), Prometheus 메트릭 노출(복구 성공률, 실패율, 처리 시간, 큐별 메시지 수), 영구 실패 메시지에 대한 알림 시스템(이메일/Slack 통합), 복구 대시보드용 API 엔드포인트, 복구 이력 조회 API, 수동 복구 트리거 기능, 시스템 상태 모니터링 API

## 6. [BFS-59] DLQMonitor 클래스 구현 - 다중 DLQ 동시 모니터링 시스템 [pending]
### Dependencies: None
### Description: request-dlq, signed-tx-dlq, broadcast-tx-dlq 세 개의 DLQ를 동시에 모니터링하는 DLQMonitor 클래스를 구현합니다.
### Details:
src/services/dlq-monitor.service.ts 파일 생성, AWS SQS SDK를 사용한 다중 큐 폴링 구현, 폴링 간격 환경변수 설정(기본 30초), 메시지 수신 실패 시 재연결 로직, 각 DLQ별 독립적인 폴링 워커 스레드 생성, Promise.all을 사용한 병렬 처리 구현, 메시지 파싱 및 DLQMessage 인터페이스 정의

## 7. [BFS-60] ErrorAnalyzer 구현 - DLQ 메시지 에러 분석 및 분류 시스템 [pending]
### Dependencies: 33.2
### Description: DLQ 메시지의 에러 내용을 분석하여 에러 타입을 분류하고 적절한 복구 전략을 결정하는 ErrorAnalyzer를 구현합니다.
### Details:
src/services/error-analyzer.service.ts 파일 생성, 에러 타입 enum 정의(NETWORK_ERROR, NONCE_ERROR, INSUFFICIENT_BALANCE, GAS_ERROR, UNKNOWN_ERROR), 메시지 내용 파싱 및 에러 패턴 매칭 로직, 각 에러 타입별 특성 분석 메서드 구현, 에러 심각도 레벨 분류, 복구 가능성 판단 로직

## 8. [BFS-61] RecoveryStrategy 인터페이스 및 구체 전략 클래스들 구현 [pending]
### Dependencies: 33.2
### Description: 각 에러 타입별로 특화된 복구 전략을 구현하는 RecoveryStrategy 인터페이스와 구체 전략 클래스들을 구현합니다.
### Details:
src/strategies/ 디렉토리 생성, RecoveryStrategy 인터페이스 정의(canRecover, recover, getMaxRetryCount 메서드), NetworkErrorRecovery(지수 백오프 재시도, 최대 5회), NonceErrorRecovery(NonceCacheService 재시작 후 재시도), InsufficientBalanceRecovery(영구 실패 처리), GasErrorRecovery(가스비 재계산 후 재시도), UnknownErrorRecovery(기본 재시도 로직) 클래스 구현

## 9. [BFS-62] RecoveryOrchestrator 구현 - 전체 복구 워크플로우 관리 [pending]
### Dependencies: 33.1, 33.2, 33.3
### Description: DLQ 메시지 수신부터 복구 완료까지 전체 프로세스를 관리하는 RecoveryOrchestrator 클래스를 구현합니다.
### Details:
src/services/recovery-orchestrator.service.ts 파일 생성, DLQMonitor와 ErrorAnalyzer, RecoveryStrategy 클래스들을 조합한 워크플로우 관리, 메시지 수신 → 에러 분석 → 전략 선택 → 복구 실행 → 결과 처리 파이프라인 구현, 복구 성공 시 원본 큐로 재전송 로직, 복구 실패 시 재시도 카운트 관리, 영구 실패 처리 및 알림 발송, RecoveryAttempt 데이터베이스 모델에 복구 이력 저장

## 10. [BFS-63] 관리 API 및 모니터링 시스템 구현 [pending]
### Dependencies: 33.4
### Description: Recovery Service의 상태 조회, 수동 복구 트리거, 메트릭 수집을 위한 REST API와 모니터링 시스템을 구현합니다.
### Details:
src/controllers/recovery.controller.ts 생성, GET /api/recovery/status (전체 복구 상태 조회), POST /api/recovery/trigger (수동 복구 실행), GET /api/recovery/metrics (Prometheus 메트릭), GET /api/recovery/history (복구 이력 조회) 엔드포인트 구현, Prometheus 메트릭 수집(복구 성공/실패율, 처리 시간, 큐별 메시지 수), 영구 실패 메시지 알림 시스템(이메일/Slack 연동), 복구 대시보드용 데이터 API 제공

## 11. [BFS-64] DLQMonitor 클래스 및 기본 SQS 연결 구현 [pending]
### Dependencies: None
### Description: 3개의 DLQ(request-dlq, signed-tx-dlq, broadcast-tx-dlq)를 동시에 모니터링할 수 있는 DLQMonitor 클래스의 기본 구조와 SQS 연결을 구현합니다.
### Details:
DLQMonitor 클래스 생성, 환경변수에서 DLQ URL 목록 읽기, AWS SQS Client 초기화, 각 큐별 연결 상태 관리, 연결 실패 시 재연결 로직 구현. SQSClient 인스턴스를 클래스 속성으로 관리하고, 큐 URL 배열을 통해 다중 큐 관리 구조 설계.

## 12. [BFS-65] 메시지 수신 및 배치 처리 로직 구현 [pending]
### Dependencies: None
### Description: ReceiveMessageCommand를 사용하여 각 DLQ에서 메시지를 배치로 수신하고, 병렬 처리를 지원하는 로직을 구현합니다.
### Details:
ReceiveMessageCommand 설정 (MaxNumberOfMessages=10, WaitTimeSeconds=20 for long polling), Promise.all을 사용한 다중 큐 동시 폴링, 메시지 배치 처리 큐 구현, 동시 처리 제한 로직 (semaphore 패턴), 메시지 수신 실패 시 에러 처리 및 로깅.

## 13. [BFS-66] 메시지 파싱 및 에러 정보 추출 구현 [pending]
### Dependencies: None
### Description: 수신된 DLQ 메시지의 body를 파싱하여 원본 메시지와 에러 정보를 추출하고, 에러 타입을 식별하는 로직을 구현합니다.
### Details:
메시지 body JSON 파싱, 원본 메시지와 에러 스택 분리, 에러 타입 분류 로직 (NetworkError, NonceError, InsufficientBalance 등), 메시지 메타데이터 추출 (타임스탬프, 재시도 횟수), 파싱 실패 시 안전한 에러 처리.

## 14. [BFS-67] 폴링 스케줄러 및 생명주기 관리 구현 [pending]
### Dependencies: None
### Description: 30초 간격의 폴링 스케줄러를 구현하고, graceful shutdown을 포함한 서비스 생명주기를 관리하는 로직을 구현합니다.
### Details:
setInterval 기반 폴링 스케줄러, 환경변수로 폴링 간격 조정 (POLL_INTERVAL_SECONDS), 서비스 시작/중지 메서드, graceful shutdown 시그널 처리 (SIGTERM, SIGINT), 진행 중인 작업 완료 대기 로직, 스케줄러 상태 추적.

## 15. [BFS-68] 메시지 처리 상태 관리 및 메트릭 시스템 구현 [pending]
### Dependencies: None
### Description: 처리 중인 메시지의 상태를 추적하고, 모니터링을 위한 메트릭 수집 시스템을 구현합니다.
### Details:
메시지 처리 상태 관리 (processing, completed, failed), 우선순위 큐 구현으로 메시지 순서 관리, 재시도 횟수 추적, 처리 시간 측정, 기본 메트릭 수집 (수신 메시지 수, 처리 성공/실패율), 로깅 시스템 통합.

## 16. [BFS-69] ErrorAnalyzer 클래스 구현 [pending]
### Dependencies: None
### Description: DLQ 메시지의 에러 타입을 분석하고 분류하는 ErrorAnalyzer 클래스를 구현합니다. 에러 메시지를 파싱하여 NETWORK, NONCE, INSUFFICIENT_FUNDS, GAS, UNKNOWN 등의 타입으로 분류하고 재시도 가능 여부를 판단합니다.
### Details:
ErrorAnalyzer 클래스에 analyzeError(message: DLQMessage) 메소드 구현, 에러 메시지 패턴 매칭으로 타입 분류, isRetryable(errorType: ErrorType) 메소드로 재시도 가능성 판단, 에러 심각도 레벨 설정, TypeScript enum으로 ErrorType 정의 (NETWORK_ERROR, NONCE_ERROR, INSUFFICIENT_FUNDS, GAS_ERROR, UNKNOWN_ERROR)

## 17. [BFS-70] RecoveryStrategy 인터페이스 및 기본 클래스 정의 [pending]
### Dependencies: 33.16
### Description: 복구 전략의 공통 인터페이스와 기본 구현을 정의합니다. 모든 복구 전략이 따라야 할 메소드와 공통 로직을 제공하는 기반 클래스를 구현합니다.
### Details:
RecoveryStrategy 인터페이스 정의: canHandle(errorType: ErrorType), execute(message: DLQMessage), getRetryPolicy(), getMaxRetries() 메소드, BaseRecoveryStrategy 추상 클래스 구현으로 공통 로직 제공, RetryPolicy 타입 정의 (LINEAR, EXPONENTIAL), 복구 결과를 위한 RecoveryResult 타입 정의 (SUCCESS, RETRY, PERMANENT_FAILURE)

## 18. [BFS-71] NetworkErrorRecovery 전략 구현 [pending]
### Dependencies: 33.17
### Description: 네트워크 관련 에러에 대한 복구 전략을 구현합니다. 지수 백오프 방식으로 재시도하며 최대 5회까지 시도한 후 원본 큐로 재전송합니다.
### Details:
NetworkErrorRecovery 클래스 구현, 지수 백오프 로직 (2초->4초->8초->16초->32초), 최대 5회 재시도 제한, 네트워크 에러 타입 감지 (연결 실패, 타임아웃, DNS 오류), 재시도 성공 시 원본 큐로 메시지 재전송, 재시도 실패 시 다음 전략으로 전달 또는 영구 실패 처리

## 19. [BFS-72] NonceErrorRecovery 및 InsufficientFundsRecovery 전략 구현 [pending]
### Dependencies: 33.17
### Description: Nonce 충돌과 잔액 부족 에러에 대한 복구 전략을 구현합니다. Nonce 에러는 상태 리셋 후 재처리하고, 잔액 부족은 영구 실패로 처리합니다.
### Details:
NonceErrorRecovery: withdrawal_requests 테이블에서 해당 요청의 상태를 PENDING으로 리셋, request-queue로 메시지 재전송, NonceCacheService 캐시 무효화, InsufficientFundsRecovery: withdrawal_requests 상태를 FAILED로 마킹, 영구 실패 처리로 더 이상 재시도 안함, 관리자 알림 트리거, 사용자 알림 시스템 연동

## 20. [BFS-73] GasErrorRecovery 및 UnknownErrorRecovery 전략 구현 [pending]
### Dependencies: 33.17
### Description: 가스 관련 에러와 분류되지 않은 에러에 대한 복구 전략을 구현합니다. 가스 에러는 가스비 재계산 후 재시도하고, 알 수 없는 에러는 기본 재시도 로직을 적용합니다.
### Details:
GasErrorRecovery: 현재 네트워크 상태 기반 가스비 재계산, Gas Price Oracle 연동으로 적정 가스비 산출, 재계산된 가스비로 트랜잭션 재생성 후 재시도, 최대 3회 가스비 조정 시도, UnknownErrorRecovery: 기본 선형 백오프로 재시도 (5초 간격), 최대 3회 재시도 후 수동 검토를 위한 별도 큐로 이동, 에러 상세 정보 로깅 및 관리자 알림

