# Task ID: 28
# Title: [BFS-41] 프로덕션급 로깅 라이브러리 마이그레이션
# Status: done
# Dependencies: 11, 15
# Priority: medium
# Description: 현재 커스텀 Logger를 winston 또는 pino 같은 프로덕션급 로깅 라이브러리로 대체하여 구조화된 로깅, 설정 가능한 로그 레벨, 다양한 출력 옵션을 지원하도록 시스템을 개선합니다.
# Details:
**구현 목표**
- 현재 커스텀 Logger 클래스를 프로덕션급 로깅 라이브러리로 완전 대체
- 구조화된 로깅으로 로그 분석 및 모니터링 개선
- 환경별 로그 레벨 설정 및 다양한 출력 대상 지원

**1. 로깅 라이브러리 선택 및 설치**
- winston vs pino 성능 및 기능 비교 분석
- 선택된 라이브러리 설치 및 기본 설정
- TypeScript 타입 정의 설치

**2. 통합 Logger 서비스 구현**
- packages/shared/src/services에 LoggerService 클래스 생성
- 환경 변수 기반 로그 레벨 설정 (LOG_LEVEL)
- 구조화된 로그 포맷 정의 (JSON 형태)
```typescript
interface LogContext {
  service: string;
  requestId?: string;
  userId?: string;
  transactionHash?: string;
  chainId?: number;
  metadata?: Record<string, any>;
}
```

**3. 출력 대상 설정**
- 개발 환경: 콘솔 출력 (색상 포함)
- 프로덕션 환경: 파일 출력 + 외부 서비스 연동
- 로그 파일 로테이션 설정 (daily, 최대 크기 제한)
- 에러 로그 별도 파일 저장

**4. 기존 Logger 대체**
- withdrawal-api, tx-processor, tx-monitor 앱들의 기존 Logger import 교체
- console.log/error 호출을 구조화된 로그로 변환
- 중요 비즈니스 로직에 추적 가능한 로그 추가
- 민감한 정보(개인키, 비밀번호) 로깅 방지 필터 구현

**5. 로그 레벨 및 필터링**
- ERROR: 시스템 오류, 예외 상황
- WARN: 경고, 잠재적 문제
- INFO: 일반적인 비즈니스 로직 실행
- DEBUG: 상세한 디버깅 정보
- 환경별 기본 로그 레벨 설정 (개발: DEBUG, 프로덕션: INFO)

**6. 성능 최적화**
- 비동기 로깅으로 메인 스레드 블로킹 방지
- 로그 버퍼링 및 배치 처리
- 고빈도 로그에 대한 샘플링 적용

# Test Strategy:
**1. 로깅 시스템 검증 테스트**
- LoggerService 인스턴스 생성 및 기본 설정 테스트
- 각 로그 레벨별 출력 정확성 검증
- 구조화된 로그 포맷 JSON 검증
- 환경 변수별 로그 레벨 동적 변경 테스트

**2. 출력 대상 테스트**
- 콘솔 출력 형식 및 색상 표시 확인
- 파일 출력 기능 및 로테이션 정책 테스트
- 에러 로그 별도 파일 저장 검증
- 로그 파일 크기 제한 및 아카이브 기능 테스트

**3. 보안 및 필터링 테스트**
- 민감한 정보 자동 마스킹 기능 검증
- 개인키, 비밀번호 등이 로그에 노출되지 않는지 확인
- 로그 컨텍스트 정보 정확성 검증 (requestId, userId 등)

**4. 성능 테스트**
- 고빈도 로깅 상황에서 메인 스레드 블로킹 없음 확인
- 로그 버퍼링 및 배치 처리 성능 측정
- 기존 커스텀 Logger 대비 성능 개선 측정

**5. 통합 테스트**
- 모든 마이크로서비스에서 동일한 로그 포맷 출력 확인
- 분산 환경에서 requestId 추적 가능성 검증
- 로그 분석 도구와의 호환성 테스트
