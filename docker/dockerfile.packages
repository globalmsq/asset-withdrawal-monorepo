# Multi-stage Dockerfile for Nx applications
FROM node:20-alpine AS base

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./
COPY packages/api-server/package.json ./packages/api-server/
COPY libs/shared/package.json ./libs/shared/
COPY libs/database/package.json ./libs/database/

# Install all dependencies
RUN yarn install --frozen-lockfile

# Copy source files
COPY nx.json tsconfig.json ./
COPY packages/ ./packages/
COPY libs/ ./libs/
COPY prisma/ ./prisma/

# Generate Prisma client
RUN npx prisma generate

# Build stage
FROM base AS builder

# Disable Nx Daemon for Docker builds
ENV NX_DAEMON=false

# Build the libraries and applications
RUN yarn nx run database:build
RUN yarn nx run shared:build
RUN yarn nx run api-server:build
RUN yarn nx run helloworld:build

# Production stage for api-server
FROM node:20-alpine AS api-server

# Install production dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./
COPY packages/api-server/package.json ./packages/api-server/
COPY libs/shared/package.json ./libs/shared/
COPY libs/database/package.json ./libs/database/

# Install production dependencies only
RUN yarn install --frozen-lockfile --production

# Copy Prisma schema and generate client
COPY prisma/ ./prisma/
RUN npx prisma generate

# Copy built application
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/packages/api-server/dist ./packages/api-server/dist
COPY --from=builder /app/libs/shared/dist ./libs/shared/dist
COPY --from=builder /app/libs/database/dist ./libs/database/dist

# Set environment variables
ENV NODE_ENV=production
ENV PORT=8080

# Expose port
EXPOSE 8080

# Start the application
CMD ["node", "packages/api-server/dist/main.js"]

# Production stage for helloworld (for backward compatibility)
FROM node:20-alpine AS helloworld

WORKDIR /app

# Copy built files from builder
COPY --from=builder /app/dist/packages/helloworld ./

# Set environment
ENV NODE_ENV=production
ENV PORT=3000

# Expose port
EXPOSE 3000

# Start the application
CMD ["node", "main.js"]