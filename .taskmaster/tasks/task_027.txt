# Task ID: 27
# Title: [BFS-43] Account Manager 서비스 구현
# Status: pending
# Dependencies: 12, 15
# Priority: medium
# Description: 메인 계정에서 서브 계정으로 자동 잔액 밸런싱을 수행하는 Account Manager 서비스를 구현하여 서브 계정 잔액 모니터링, 임계값 기반 자동 충전, 배치 처리를 통한 가스비 절감 기능을 제공합니다.
# Details:
**구현 목표**
- 서브 계정 잔액을 지속적으로 모니터링하고 임계값 도달 시 자동 충전
- 배치 처리를 통한 가스비 최적화 및 메인 계정 잔액 부족 시 알림
- ManagedAccount 및 BalanceTransfer 모델을 통한 계정 관리 시스템

**1. 데이터베이스 모델 구현**
- ManagedAccount 모델 추가
  ```typescript
  model ManagedAccount {
    id          String   @id @default(cuid())
    address     String   @unique
    name        String
    threshold   Decimal  // 최소 잔액 임계값
    targetAmount Decimal // 충전 목표 금액
    isActive    Boolean  @default(true)
    mainAccount String   // 메인 계정 주소
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    balanceTransfers BalanceTransfer[]
  }
  ```
- BalanceTransfer 모델 추가
  ```typescript
  model BalanceTransfer {
    id              String         @id @default(cuid())
    fromAddress     String
    toAddress       String
    amount          Decimal
    transactionHash String?
    status          TransferStatus @default(PENDING)
    managedAccount  ManagedAccount @relation(fields: [toAddress], references: [address])
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
  }
  
  enum TransferStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
  }
  ```

**2. Account Manager 서비스 구현**
- Nx를 사용하여 account-manager 앱 생성 (nx g @nx/node:app account-manager)
- AccountBalanceMonitor 클래스로 서브 계정 잔액 모니터링
- BalanceTransferService 클래스로 자동 충전 로직 구현
- Redis를 사용한 잔액 캐싱 및 모니터링 상태 관리
- 배치 처리를 위한 BatchTransferProcessor 구현

**3. 잔액 모니터링 시스템**
- 주기적인 서브 계정 잔액 확인 (30초 간격)
- 임계값 도달 시 자동 충전 트리거
- 메인 계정 잔액 확인 및 부족 시 알림 발송
- 잔액 변화 이력 추적 및 로깅

**4. 배치 처리 최적화**
- 동시간대 여러 충전 요청을 배치로 묶어 처리
- Multicall3을 활용한 배치 전송으로 가스비 절감
- 배치 크기 최적화 및 가스 한도 내 처리
- 실패한 전송에 대한 개별 재시도 로직

**5. 알림 시스템**
- 메인 계정 잔액 부족 시 이메일/Slack 알림
- 충전 실패 시 관리자 알림
- 비정상적인 잔액 소모 패턴 감지 및 알림

**6. API 엔드포인트**
- GET /account-manager/accounts - 관리 계정 목록 조회
- POST /account-manager/accounts - 새 관리 계정 등록
- PUT /account-manager/accounts/:id - 계정 설정 업데이트
- GET /account-manager/transfers - 잔액 이전 내역 조회
- POST /account-manager/transfers/manual - 수동 잔액 이전

# Test Strategy:
**1. 단위 테스트**
- ManagedAccount 및 BalanceTransfer 모델 CRUD 테스트
- AccountBalanceMonitor의 잔액 확인 로직 테스트
- BalanceTransferService의 충전 로직 테스트
- 임계값 도달 감지 및 트리거 테스트
- 배치 처리 로직 및 최적화 테스트

**2. 통합 테스트**
- 실제 Polygon 테스트넷에서 잔액 모니터링 테스트
- 임계값 도달 시 자동 충전 플로우 테스트
- 메인 계정 잔액 부족 시나리오 테스트
- 배치 전송 성공/실패 시나리오 테스트
- 동시 다중 계정 모니터링 테스트

**3. 성능 테스트**
- 대량 계정(100개+) 모니터링 성능 테스트
- 배치 처리 효율성 및 가스비 절감 검증
- Redis 캐싱 성능 및 메모리 사용량 테스트
- 모니터링 주기별 시스템 부하 테스트

**4. 장애 복구 테스트**
- 네트워크 장애 시 재시도 로직 테스트
- RPC 노드 실패 시 폴백 처리 테스트
- 서비스 재시작 시 상태 복구 테스트
- 부분 실패한 배치 전송 복구 테스트

# Subtasks:
## 1. 데이터베이스 모델 및 마이그레이션 구현 [pending]
### Dependencies: None
### Description: ManagedAccount와 BalanceTransfer 모델을 정의하고 Prisma 스키마를 업데이트하여 계정 관리 시스템의 데이터 구조를 구축합니다.
### Details:
Prisma 스키마에 ManagedAccount 모델 추가 (id, address, name, threshold, targetAmount, isActive, mainAccount, timestamps), BalanceTransfer 모델 추가 (id, fromAddress, toAddress, amount, transactionHash, status, timestamps), TransferStatus enum 정의 (PENDING, PROCESSING, COMPLETED, FAILED), 모델 간 관계 설정 (BalanceTransfer -> ManagedAccount), 필요한 인덱스 추가 (address unique index, status index for queries)

## 2. Account Manager 앱 초기 구조 및 서비스 계층 구현 [pending]
### Dependencies: 27.1
### Description: Nx를 사용하여 account-manager 앱을 생성하고 핵심 서비스 클래스들을 구현하여 계정 관리의 기본 비즈니스 로직을 구축합니다.
### Details:
Nx 명령어로 account-manager 앱 생성 (nx g @nx/node:app account-manager), AccountBalanceMonitor 클래스 구현 (잔액 조회, 임계값 비교, 모니터링 스케줄러), BalanceTransferService 클래스 구현 (충전 로직, 트랜잭션 생성, 상태 관리), BatchTransferProcessor 클래스 구현 (배치 큐 관리, 배치 크기 최적화, Multicall3 통합), Redis 클라이언트 설정 및 캐싱 레이어 구현, 환경 변수 설정 (MONITORING_INTERVAL, BATCH_SIZE, GAS_LIMIT 등)

## 3. 잔액 모니터링 및 자동 충전 시스템 구현 [pending]
### Dependencies: 27.2
### Description: 주기적으로 서브 계정의 잔액을 확인하고 임계값 도달 시 자동으로 충전을 트리거하는 모니터링 시스템을 구현합니다.
### Details:
30초 간격 모니터링 스케줄러 구현 (node-cron 또는 bull 사용), Web3/Ethers.js를 통한 실시간 잔액 조회 로직, 임계값 비교 및 충전 필요성 판단 알고리즘, 메인 계정 잔액 확인 및 충분성 검증, 충전 트리거 이벤트 발생 및 큐 등록, Redis를 활용한 잔액 캐싱 (TTL 설정), 모니터링 상태 추적 (last_checked, next_check 등), 동시성 제어를 위한 분산 락 구현

## 4. 배치 처리 최적화 및 가스비 절감 시스템 구현 [pending]
### Dependencies: 27.3
### Description: 여러 충전 요청을 배치로 묶어 Multicall3을 통해 처리하여 가스비를 절감하고 처리 효율을 높이는 시스템을 구현합니다.
### Details:
배치 큐 시스템 구현 (Bull Queue 활용), 시간 윈도우 기반 배치 수집 (예: 30초 동안 요청 수집), Multicall3 컨트랙트 인터페이스 구현, 배치 크기 최적화 알고리즘 (가스 한도 고려), 배치 트랜잭션 구성 및 가스 추정, 개별 전송 실패 처리 및 재시도 로직, 배치 처리 결과 파싱 및 개별 상태 업데이트, 가스비 절감 메트릭 수집 및 로깅

## 5. API 엔드포인트 및 알림 시스템 구현 [pending]
### Dependencies: 27.4
### Description: Account Manager 기능을 제어하고 모니터링할 수 있는 RESTful API와 중요 이벤트에 대한 알림 시스템을 구현합니다.
### Details:
Express Router 설정 및 API 엔드포인트 구현 (GET /accounts, POST /accounts, PUT /accounts/:id, GET /transfers, POST /transfers/manual), 요청 검증 미들웨어 구현 (Joi 또는 Zod 사용), 알림 서비스 구현 (EmailService, SlackService 인터페이스), 메인 계정 잔액 부족 알림 로직, 충전 실패 알림 및 에러 상세 정보 포함, 비정상 패턴 감지 알고리즘 (급격한 잔액 소모 등), 알림 템플릿 및 포맷팅 시스템, 알림 전송 이력 및 재시도 관리

