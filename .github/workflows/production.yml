# Production Release Workflow
# This workflow is currently disabled and for reference only
# To enable: uncomment the 'on' section and remove the if: false condition

name: Production Release

# DISABLED - Uncomment to enable
on:
  workflow_dispatch: # Manual trigger only
# on:
#   release:
#     types: [published]

permissions:
  id-token: write
  contents: read

env:
  REGISTRY: ${{ secrets.ECR_REGISTRY }}
  IMAGE_NAME: ${{ secrets.ECR_REPOSITORY }}

jobs:
  # Change detection and build planning using Nx cache
  affected-analysis:
    runs-on: ubuntu-latest
    # DISABLED - This job is currently disabled
    if: false # This prevents the job from running
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
      affected-projects: ${{ steps.affected.outputs.affected-projects }}
      build-plan: ${{ steps.build-plan.outputs.plan }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Get affected projects
        id: affected
        run: |
          # Detect changed projects
          AFFECTED=$(npx nx affected:apps --plain --base=origin/main~1 --head=HEAD)

          if [ -n "$AFFECTED" ]; then
            echo "affected=true" >> $GITHUB_OUTPUT
            AFFECTED_JSON=$(echo "$AFFECTED" | tr ' ' '\n' | jq -R . | jq -s .)
            echo "affected-projects=$AFFECTED_JSON" >> $GITHUB_OUTPUT
          else
            echo "affected=false" >> $GITHUB_OUTPUT
            echo "affected-projects=[]" >> $GITHUB_OUTPUT
          fi

      - name: Generate build plan
        id: build-plan
        run: |
          if [ "${{ steps.affected.outputs.affected }}" = "true" ]; then
            # Generate build plan for changed projects
            PLAN=$(npx nx affected:apps --plain --base=origin/main~1 --head=HEAD | tr ' ' '\n' | jq -R . | jq -s .)
            echo "plan=$PLAN" >> $GITHUB_OUTPUT
          else
            # Build plan for all projects
            PLAN=$(npx nx list --json | jq -r '.apps[].name' | jq -R . | jq -s .)
            echo "plan=$PLAN" >> $GITHUB_OUTPUT
          fi

  # Nx cache restoration and testing
  test-affected:
    needs: affected-analysis
    runs-on: ubuntu-latest
    if: needs.affected-analysis.outputs.affected == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nx-cache-${{ runner.os }}-

      - name: Run tests for affected projects
        run: |
          npx nx affected:test --base=origin/main~1 --head=HEAD --parallel=3

      - name: Save Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

  # Docker build and ECR push (parallel processing) - Production
  build-and-push-production:
    needs: [affected-analysis, test-affected]
    runs-on: ubuntu-latest
    if: always() && (needs.affected-analysis.outputs.affected == 'true' || needs.test-affected.result == 'skipped')
    strategy:
      matrix:
        project: ${{ fromJson(needs.affected-analysis.outputs.build-plan) }}
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubAction-ECR-Push-Role
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.project }}
          tags: |
            type=raw,value=production
            type=semver,pattern={{version}}
            type=raw,value=${{ matrix.project }}-production

      - name: Build and push Docker image (production)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dockerfile.packages
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.project }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.project }}:buildcache,mode=max
          build-args: |
            PROJECT_NAME=${{ matrix.project }}
            BUILD_TARGET=${{ matrix.project }}:build

  # Build all (when no changes) - Production
  build-all-production:
    needs: affected-analysis
    runs-on: ubuntu-latest
    if: needs.affected-analysis.outputs.affected == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubAction-ECR-Push-Role
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=production
            type=semver,pattern={{version}}

      - name: Build and push all Docker images (production)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dockerfile.packages
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  # Deployment notification
  notify-production:
    needs: [build-and-push-production, build-all-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-push-production.result }}" = "success" ] || [ "${{ needs.build-all-production.result }}" = "success" ]; then
            echo "✅ Production Docker images built and pushed successfully"
          else
            echo "❌ Production Docker build failed"
            exit 1
          fi
