// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:pass@localhost:3306/withdrawal_system"
}

model User {
  id           BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  email        String        @unique @db.VarChar(255)
  password     String        @db.VarChar(255)
  role         String        @default("USER") @db.VarChar(20)
  wallet       String?       @unique @db.VarChar(42)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("users")
}

model WithdrawalRequest {
  id            BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  requestId     String       @unique @db.VarChar(36) // UUID v4 with rearranged parts (3-2-1-4-5)
  amount        String       @db.VarChar(50)
  symbol        String       @db.VarChar(10) // Token symbol
  toAddress     String       @db.VarChar(42)
  tokenAddress  String       @db.VarChar(42)
  network       String       @db.VarChar(50) // Combined blockchain_network format
  blockchain    String?      @db.VarChar(20) // polygon, bsc, etc.
  status        String       @default("PENDING") @db.VarChar(20) // PENDING, VALIDATING, SIGNING, BROADCASTING, COMPLETED, FAILED
  errorMessage  String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([status])
  @@index([requestId])
  @@index([createdAt]) // Better time-based queries with rearranged UUID
  @@map("withdrawal_requests")
}

model Transaction {
  id                 BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  requestId          String?             @db.VarChar(36) // Link to withdrawal request (UUID format)
  amount             Decimal             @db.Decimal(18, 8)
  symbol             String              @db.VarChar(10) // Token symbol
  tokenAddress       String?             @db.VarChar(42) // Ethereum address
  toAddress          String?             @db.VarChar(42) // Recipient address
  network            String?             @db.VarChar(20) // ethereum, polygon, etc.
  status             String              @db.VarChar(20) // pending, completed, failed
  txHash             String?             @db.VarChar(66)
  blockNumber        Int?
  confirmations      Int                 @default(0)
  fee                Decimal?            @db.Decimal(18, 8)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([requestId])
  @@map("transactions")
}