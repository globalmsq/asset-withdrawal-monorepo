# Task ID: 29
# Title: [BFS-42] NonceCacheService의 Dependency Injection 개선
# Status: pending
# Dependencies: 28, 15
# Priority: medium
# Description: NonceCacheService 생성자에서 Logger를 필수 파라미터로 변경하고 기본 Logger 인스턴스 생성 로직을 제거하여 의존성 주입 패턴을 개선합니다.
# Details:
**구현 목표**
- NonceCacheService의 생성자에서 Logger 의존성을 명시적으로 주입받도록 변경
- 클래스 내부에서 Logger 인스턴스를 직접 생성하는 로직 제거
- 의존성 역전 원칙(DIP)을 준수하여 테스트 가능성과 유연성 향상

**1. NonceCacheService 생성자 수정**
- 현재 생성자에서 Logger 매개변수를 선택적(optional)에서 필수(required)로 변경
- 기본 Logger 인스턴스 생성 로직 제거
```typescript
// Before
constructor(private logger: Logger = new Logger()) {}

// After
constructor(private logger: Logger) {}
```

**2. 호출부 코드 수정**
- NonceCacheService를 사용하는 모든 클래스에서 Logger 인스턴스를 명시적으로 전달
- signing-service, tx-processor 등에서 LoggerService 인스턴스 주입
- 테스트 코드에서 Mock Logger 주입 가능하도록 수정

**3. 타입 안전성 개선**
- Logger 인터페이스 타입 정의 확인 및 필요시 개선
- 의존성 주입 컨테이너 사용 시 Logger 등록 설정

# Test Strategy:
**1. 생성자 변경 테스트**
- Logger 없이 NonceCacheService 인스턴스 생성 시 TypeScript 컴파일 오류 발생 확인
- 올바른 Logger 인스턴스로 생성 시 정상 작동 확인
- Mock Logger를 주입하여 로그 메서드 호출 여부 검증

**2. 의존성 주입 테스트**
- 실제 LoggerService 인스턴스 주입 시 정상 로깅 동작 확인
- 다양한 Logger 구현체(winston, pino 등) 주입 테스트
- 로그 레벨별 출력 정확성 검증

**3. 통합 테스트**
- signing-service에서 NonceCacheService 사용 시 정상 작동 확인
- tx-processor에서 논스 캐싱 기능과 로깅 기능 동시 검증
- 에러 상황에서 적절한 로그 출력 여부 확인

**4. 리팩토링 검증**
- 모든 NonceCacheService 사용처에서 Logger 주입 확인
- 기존 기능 동작에 영향 없음을 확인하는 회귀 테스트
