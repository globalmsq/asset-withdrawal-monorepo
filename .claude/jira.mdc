# jira.mdc - Jira Integration Guidelines

## General Synchronization Rules

### Definition of Jira Synchronization

Jira synchronization means creating, updating, and maintaining consistency between Task Master tasks/subtasks and their corresponding Jira issues. This includes:

- Creating new Jira issues for Task Master tasks that don't have them
- Recording Jira keys in Task Master tasks
- Updating Task Master titles to include `[PROJECT-KEY]` prefix
- Keeping status synchronized between both systems

## Important Rules

1. **Task Master Titles**: Include Jira key as prefix `[PROJECT-KEY]` in Task Master task titles
2. **Jira Issue Titles**: Keep original titles in Jira without prefix (to avoid duplication)
3. **JSON Storage**: Store Jira key in `jiraKey` field in tasks.json
4. **Title Updates**: When updating Task Master titles, DO NOT update Jira issue titles
5. **Bidirectional Sync**: Both Task Master and Jira should always reflect the same status

### Language Requirements - MANDATORY

- **Task Master Tasks**: Write in Korean for better local understanding
- **Jira Issues**: ALL content MUST be in English (titles, descriptions, comments)
- **Translation Required**: Before creating Jira issues, translate Korean Task Master content to English
- **Example**: Korean "Hardhat 노드를 활용한 로컬호스트 체인 지원 구현" → English "Implement Hardhat node-based localhost chain support"

### Using Existing Jira Keys

Task Master tasks already contain Jira keys internally. Use `task-master show <id>` to find the Jira key (e.g., BFS-30) and use that key for Jira synchronization.

### Jira Key in Task Titles - MANDATORY

- **Main Tasks**: Must include `[BFS-XX]` prefix in Task Master title after Jira creation
- **Subtasks**: Should include `[BFS-XX]` prefix when they have their own Jira issues
- **Update Process**: After creating Jira issue, immediately update Task Master title with the key
- **Example**: "네이티브 토큰 출금 지원" → "[BFS-38] 네이티브 토큰 출금 지원"

## EPIC Association - MANDATORY

- **All Story/Task type issues MUST be linked to an EPIC**
- **Sub-tasks CANNOT be directly linked to EPICs** (Jira limitation)
- **Jira Hierarchy**: EPIC → Story/Task → Sub-task
- **When creating new Jira issues**:
  - Main tasks (Story/Task): Always set the parent field to the appropriate EPIC
  - Subtasks (Sub-task): Set parent to the corresponding Story/Task (NOT the EPIC)
- **Verification**: After creating/updating, always verify EPIC linkage:
  - Stories/Tasks should show EPIC in parent field
  - Sub-tasks should show Story/Task in parent field
- **Common EPICs**: BFS-1 (Asset Withdrawal System) is the main EPIC for this project

## Complete Synchronization Workflow

### 1. Creating New Tasks

When a new task is created in Task Master:

1. Create task in Task Master
2. Create corresponding Jira issue (Story for main tasks, Sub-task for subtasks)
3. **Set EPIC link (CRITICAL)**:
   - For Story/Task: Set parent field to EPIC (e.g., BFS-1)
   - For Sub-task: Set parent field to the Story/Task (NOT the EPIC)
   - Use MCP command: `editJiraIssue` with `fields: {"parent": {"key": "BFS-1"}}` for Stories
4. Add Jira key to tasks.json `jiraKey` field
5. Update Task Master title to include `[PROJECT-KEY]` prefix
6. Ensure both systems show the same initial status

### 2. Synchronizing Existing Tasks

For tasks that already have Jira keys stored in Task Master:

1. Use `task-master show <id>` to view task details and find the Jira key
2. Use the Jira key directly with MCP Atlassian tools (e.g., search with `key = BFS-30`)
3. **Verify EPIC link**:
   - Check if Story/Task has parent EPIC
   - If missing EPIC: Use `editJiraIssue` with `fields: {"parent": {"key": "BFS-1"}}`
   - For Sub-tasks: Verify they have correct Story/Task parent (NOT EPIC)
4. Update Jira status to match Task Master status
5. Add implementation notes or completion summaries to Jira

## Status Mapping

- Task Master `pending` → Jira "BACKLOG" or "Selected for Development"
- Task Master `in-progress` → Jira "IN PROGRESS"
- Task Master `done` → Jira "DONE"
- Task Master `blocked` → Jira "IN PROGRESS" + comment explaining blocker
- Task Master `deferred` → Jira "BACKLOG" + comment
- Task Master `cancelled` → Jira "CANCELLED" or close with resolution

## MCP Atlassian Integration

Claude Code can directly update Jira statuses using the MCP Atlassian server configured in `.mcp.json`. This enables seamless synchronization between Task Master and Jira without manual intervention.

### Available MCP Commands

- `getJiraIssue`: Get issue details
- `editJiraIssue`: Update issue fields
- `transitionJiraIssue`: Change issue status
- `addCommentToJiraIssue`: Add comments
- `createJiraIssue`: Create new issues
- `searchJiraIssuesUsingJql`: Search issues with JQL