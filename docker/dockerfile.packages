# Multi-stage Dockerfile for Nx applications
FROM node:22-alpine AS base

# Install build dependencies and pnpm
RUN apk add --no-cache python3 make g++ && \
    npm install -g pnpm@8.15.9

# Set working directory
WORKDIR /apps

# Copy package files to root for pnpm workspace
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml /
# In Nx monorepo, apps might not have individual package.json files
# Only copy if they exist
COPY apps/api-server/package.json* /apps/api-server/
COPY apps/signing-service/package.json* /apps/signing-service/
COPY apps/tx-broadcaster/package.json* /apps/tx-broadcaster/
COPY apps/tx-monitor/package.json* /apps/tx-monitor/
COPY packages/shared/package.json* /packages/shared/
COPY packages/database/package.json* /packages/database/

# Copy Prisma schema before installing dependencies
COPY prisma/ /prisma/

# Install all dependencies from root
WORKDIR /
RUN pnpm install --frozen-lockfile

# Copy source files
COPY nx.json tsconfig.json ./
COPY apps/ ./apps/
COPY packages/ ./packages/

# Generate Prisma client
RUN npx prisma generate

# Generic service stage with common configuration
FROM base AS apps
ARG APP_PORT

# Set environment variables
ENV NODE_ENV=production
ENV PORT=${APP_PORT}
ENV DOCKER=true

# Expose the application port
EXPOSE ${APP_PORT}

# Production stage for api-server
FROM apps AS api-server
ARG APP_PORT=8080
WORKDIR /apps/api-server
CMD ["npm", "run", "start"]

# Production stage for signing-service
FROM apps AS signing-service
ARG APP_PORT=3005
WORKDIR /apps/signing-service
CMD ["npm", "run", "start"]

# Production stage for tx-broadcaster
FROM apps AS tx-broadcaster
ARG APP_PORT=3001
WORKDIR /apps/tx-broadcaster
CMD ["npm", "run", "start"]

# Production stage for tx-monitor
FROM apps AS tx-monitor
ARG APP_PORT=3003
# Copy Prisma schema to expected location
COPY --from=base /prisma /prisma
# Set DATABASE_URL for Prisma
ENV DATABASE_URL="mysql://root:pass@mysql:3306/withdrawal_system"
WORKDIR /apps/tx-monitor
CMD ["npm", "run", "start"]
