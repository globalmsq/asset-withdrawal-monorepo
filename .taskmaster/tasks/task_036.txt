# Task ID: 36
# Title: [BFS-83] Nonce 관리 개선 - 네트워크 에러 복구 및 Gap 방지 시스템
# Status: pending
# Dependencies: 34, 35, 11, 15
# Priority: medium
# Description: signing-service의 nonce 관리 시스템을 개선하여 네트워크 에러 시 발생하는 nonce gap 문제를 해결하고, 실패한 nonce의 재사용 메커니즘과 RETRYING 상태를 도입합니다.
# Details:
**구현 목표**
- Nonce gap 문제를 근본적으로 해결하는 견고한 nonce 관리 시스템 구축
- 네트워크 에러 시 빠른 복구와 nonce 재사용을 통한 효율성 향상
- Gas 계산 순서 최적화로 불필요한 nonce 할당 방지

**1. Nonce 반환 풀 시스템 구현**
- `packages/shared/src/redis/nonce-pool.service.ts` 생성
- 실패한 트랜잭션의 nonce를 재사용 가능한 풀로 반환
```typescript
interface NoncePool {
  returnNonce(chainId: string, address: string, nonce: number): Promise<void>;
  getAvailableNonce(chainId: string, address: string): Promise<number | null>;
  clearPool(chainId: string, address: string): Promise<void>;
}
```
- Redis Sorted Set 활용: `nonce_pool:${chainId}:${address}`
- 반환된 nonce를 오름차순으로 정렬하여 저장
- 새 nonce 할당 시 풀에서 먼저 확인 후 없으면 카운터 증가

**2. Gas 계산 시점 변경**
- `apps/signing-service/src/workers/signing-worker.ts` 수정
- Nonce 할당 전에 gas estimation 수행
```typescript
// Before
const nonce = await this.nonceService.getNextNonce(chainId, address);
const gasLimit = await this.estimateGas(transaction);

// After
const gasLimit = await this.estimateGas(transaction);
if (!gasLimit) {
  throw new GasEstimationError('Failed to estimate gas');
}
const nonce = await this.nonceService.getNextNonce(chainId, address);
```
- Gas 계산 실패 시 nonce 할당하지 않음
- 불필요한 nonce 소비 방지

**3. RETRYING 상태 도입 및 DLQ 처리**
- Prisma 스키마에 RETRYING 상태 추가
```prisma
enum WithdrawalStatus {
  PENDING
  SIGNED
  BROADCASTING
  RETRYING      // 새로운 상태
  COMPLETED
  FAILED
}
```
- 네트워크 에러 감지 로직 구현
```typescript
interface NetworkErrorDetector {
  isNetworkError(error: Error): boolean;
  isRetryableError(error: Error): boolean;
  getRetryDelay(attemptNumber: number): number;
}
```
- 네트워크 에러 시 즉시 DLQ로 전송하고 상태를 RETRYING으로 변경
- Nonce를 풀로 반환하여 재사용 가능하게 함

**4. 블록체인 초기화 재시도 로직**
- `apps/signing-service/src/services/blockchain.service.ts` 개선
- Provider 초기화 실패 시 exponential backoff 재시도
```typescript
class BlockchainService {
  private async initializeWithRetry(
    maxAttempts = 5,
    baseDelay = 1000
  ): Promise<void> {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        await this.initialize();
        return;
      } catch (error) {
        if (attempt === maxAttempts) throw error;
        const delay = baseDelay * Math.pow(2, attempt - 1);
        await sleep(delay);
      }
    }
  }
}
```

**5. Nonce Gap 감지 및 자동 복구**
- 주기적으로 nonce gap 확인하는 모니터링 작업 추가
- Gap 발견 시 누락된 nonce를 풀에 추가
```typescript
class NonceGapMonitor {
  async detectGaps(chainId: string, address: string): Promise<number[]> {
    const currentNonce = await this.getCurrentNonce(chainId, address);
    const pendingNonces = await this.getPendingNonces(chainId, address);
    const gaps = [];
    
    for (let i = currentNonce; i < Math.max(...pendingNonces); i++) {
      if (!pendingNonces.includes(i)) {
        gaps.push(i);
      }
    }
    return gaps;
  }
}
```

**6. 메트릭 및 모니터링**
- Nonce 풀 크기 추적
- Gap 발생 빈도 모니터링
- 재시도 성공률 측정
- 평균 복구 시간 추적

# Test Strategy:
**1. Nonce 풀 시스템 테스트**
- 트랜잭션 실패 시 nonce가 풀로 정상 반환되는지 확인
- 풀에서 nonce 재사용 시 오름차순으로 할당되는지 검증
- 동시 요청 시 nonce 중복 할당 방지 테스트
- 풀 클리어 기능 정상 동작 확인

**2. Gas 계산 순서 테스트**
- Gas estimation 실패 시 nonce가 할당되지 않는지 확인
- Gas 계산 성공 후에만 nonce 증가하는지 검증
- 다양한 트랜잭션 타입에 대한 gas 계산 정확성 테스트

**3. RETRYING 상태 및 DLQ 처리 테스트**
- 네트워크 에러 시뮬레이션 (ECONNREFUSED, ETIMEDOUT)
- 에러 발생 시 상태가 RETRYING으로 변경되는지 확인
- DLQ로 메시지가 전송되고 nonce가 풀로 반환되는지 검증
- 재시도 가능한 에러와 영구 실패 구분 테스트

**4. 블록체인 초기화 재시도 테스트**
- Provider 연결 실패 시나리오 재현
- Exponential backoff 지연 시간 정확성 검증
- 최대 재시도 횟수 도달 시 적절한 에러 처리 확인
- 재시도 중 연결 복구 시 정상 초기화 확인

**5. Nonce Gap 감지 및 복구 테스트**
- 의도적으로 nonce gap 생성 (예: 1, 2, 5 사용 시 3, 4 gap)
- NonceGapMonitor가 gap을 정확히 감지하는지 확인
- 감지된 gap nonce가 풀에 추가되는지 검증
- Gap 복구 후 순차적 nonce 할당 재개 확인

**6. 통합 시나리오 테스트**
- 대량 트랜잭션 처리 중 간헐적 네트워크 에러 발생 시나리오
- Nonce gap 없이 모든 트랜잭션이 최종 처리되는지 확인
- 재시도 메커니즘과 풀 시스템의 조화로운 동작 검증
- 성능 벤치마크: 개선 전후 처리 속도 및 성공률 비교

# Subtasks:
## 1. [BFS-84] Nonce Pool 시스템 구현 및 Redis 연동 [pending]
### Dependencies: None
### Description: 실패한 트랜잭션의 nonce를 재사용 가능한 풀로 관리하는 시스템을 구현하고 Redis Sorted Set을 활용하여 효율적인 nonce 재사용 메커니즘을 구축합니다.
### Details:
packages/shared/src/redis/nonce-pool.service.ts 파일을 생성하여 NoncePool 인터페이스를 구현합니다. returnNonce 메서드로 실패한 nonce를 풀에 반환하고, getAvailableNonce로 재사용 가능한 가장 작은 nonce를 반환합니다. Redis Sorted Set을 사용하여 nonce_pool:${chainId}:${address} 키로 nonce를 오름차순 정렬하여 저장합니다. clearPool 메서드로 특정 주소의 풀을 초기화하는 기능도 포함합니다. 동시성 제어를 위해 Redis 트랜잭션과 Lua 스크립트를 활용하여 원자적 연산을 보장합니다.

## 2. [BFS-85] Gas 계산 우선 실행 및 Nonce 할당 최적화 [pending]
### Dependencies: 36.1
### Description: 트랜잭션 처리 순서를 변경하여 gas estimation을 nonce 할당 이전에 수행하도록 하고, gas 계산 실패 시 불필요한 nonce 소비를 방지합니다.
### Details:
apps/signing-service/src/workers/signing-worker.ts를 수정하여 processSigningTask 메서드의 실행 순서를 변경합니다. estimateGas 함수를 먼저 호출하여 gas limit을 계산하고, 성공한 경우에만 nonceService.getNextNonce를 호출합니다. GasEstimationError 클래스를 정의하여 gas 계산 실패를 명확하게 처리하고, 실패 시 즉시 에러를 throw하여 nonce 할당을 방지합니다. 또한 gas 계산 재시도 로직을 구현하여 일시적인 네트워크 문제에 대응합니다.

## 3. [BFS-86] RETRYING 상태 추가 및 네트워크 에러 감지 시스템 [pending]
### Dependencies: 36.1, 36.2
### Description: Prisma 스키마에 RETRYING 상태를 추가하고, 네트워크 에러를 감지하여 자동으로 재시도 가능한 트랜잭션을 식별하고 처리하는 시스템을 구현합니다.
### Details:
prisma/schema.prisma의 WithdrawalStatus enum에 RETRYING 상태를 추가하고 마이그레이션을 실행합니다. packages/shared/src/errors/network-error-detector.ts를 생성하여 NetworkErrorDetector 인터페이스를 구현합니다. isNetworkError 메서드로 ECONNREFUSED, ETIMEDOUT 등의 네트워크 관련 에러를 식별하고, isRetryableError로 재시도 가능 여부를 판단합니다. getRetryDelay 메서드로 exponential backoff 전략에 따른 재시도 지연 시간을 계산합니다. 네트워크 에러 발생 시 트랜잭션 상태를 RETRYING으로 변경하고, nonce를 풀로 반환한 후 DLQ로 메시지를 전송하는 로직을 구현합니다.

## 4. [BFS-87] 블록체인 서비스 초기화 재시도 및 복구 메커니즘 [pending]
### Dependencies: 36.3
### Description: 블록체인 Provider 초기화 실패 시 exponential backoff를 적용한 재시도 로직을 구현하고, 연결 복구를 자동화합니다.
### Details:
apps/signing-service/src/services/blockchain.service.ts를 개선하여 initializeWithRetry 메서드를 추가합니다. 최대 5회까지 재시도하며, 각 시도마다 2의 제곱수로 지연 시간을 증가시킵니다 (1초, 2초, 4초, 8초, 16초). Provider 연결 상태를 주기적으로 확인하는 health check 메커니즘을 구현하고, 연결이 끊어진 경우 자동으로 재연결을 시도합니다. Circuit Breaker 패턴을 적용하여 연속된 실패 시 일정 시간 동안 요청을 차단하고, 복구 후 점진적으로 트래픽을 증가시킵니다.

## 5. [BFS-88] Nonce Gap 자동 감지 및 복구 시스템 [pending]
### Dependencies: 36.1, 36.2, 36.3, 36.4
### Description: 주기적으로 nonce gap을 모니터링하여 감지하고, 발견된 gap을 자동으로 복구하는 시스템을 구현합니다.
### Details:
packages/shared/src/monitoring/nonce-gap-monitor.ts를 생성하여 NonceGapMonitor 클래스를 구현합니다. detectGaps 메서드로 현재 온체인 nonce와 pending 트랜잭션의 nonce를 비교하여 gap을 식별합니다. 발견된 gap의 nonce들을 자동으로 재사용 풀에 추가하는 recoverGaps 메서드를 구현합니다. Cron job으로 1분마다 gap 감지를 실행하고, gap 발생 시 알림을 전송합니다. Prometheus 메트릭으로 nonce 풀 크기, gap 발생 빈도, 재시도 성공률, 평균 복구 시간을 추적합니다. Grafana 대시보드를 구성하여 nonce 관리 상태를 실시간으로 모니터링할 수 있도록 합니다.

